'
Kim_fit_covs <- sem(Kim_fit_covs, data = Kim_df, se="bootstrap", missing = 'fiml')
set.seed(210410)
Kim_fit_covs <- '
DEP ~ b*CMI + c_p*REMS
CMI ~a*REMS
CMI ~ covM*ANX
DEP ~ covY*ANX
indirect :=  a*b
direct  := c_p
total_c  := c_p + (a*b)
'
Kim_fit_covs <- sem(Kim_fit_covs, data = Kim_df, se="bootstrap", missing = 'fiml')
Kcov_sum <- summary(Kim_fit_covs, standardized=T, rsq=T, fit=TRUE, ci=TRUE)
Kcov_ParEsts<- parameterEstimates(Kim_fit_covs, boot.ci.type = "bca.simple", standardized=TRUE)
Kcov_sum
Kcov_ParEsts
library(formattable) #to use the digits function
Cova <- digits(Kcov_ParEsts$est[3], 3) #B weight for the a path
Cova
Cova_p <- digits(Kcov_ParEsts$pvalue[3], 3)#p value for the a path
Cova_p
Covb <- digits(Kcov_ParEsts$est[1], 3) #B weight for the b path
Covb
Covb_p <- digits(Kcov_ParEsts$pvalue[1], 3)#p value for the b path
Covb_p
Covc_p <- digits(Kcov_ParEsts$est[2], 3) #B weight for the c' path
Covc_p
Covc_p_p <- digits(Kcov_ParEsts$pvalue[2], 3)#p value for the c' path
Covc_p_p
Covtot <-  digits(Kcov_ParEsts$est[17], 3)#p value for the total efect
Covtot
Covtot_p <- digits(Kcov_ParEsts$pvalue[17], 3)#p value for the total effect
Covtot_p
# Values for the indirect effect
COVind <- digits(Kcov_ParEsts$est[15], 3) #estimate for the indirect efect
COVind
COVind_p <- digits(Kcov_ParEsts$pvalue[15], 3) #p value for the indirect effect
COVind_p
# CIs around the indirect effect
COV_CIlo <- digits(Kcov_ParEsts$ci.lower[15], 3) #lower confidence interval
COV_CIlo
COV_CIup <- digits(Kcov_ParEsts$ci.upper[15], 3) #upper confidence interval
COV_CIup
# Proportion of variance accounted for
COV_Rsq_Y <- percent(Kcov_sum$PE$est[18])
COV_Rsq_Y
COV_Rsq_M <- percent(Kcov_sum$PE$est[19])
COV_Rsq_M
KimCOVTab <- semTable(Kim_fit_covs, columns = c("est", "se", "p", "rsquare"),  columnLabels = c(eststars = "Estimate"), paramSets = c("composites", "loadings", "slopes", "intercepts", "residualvariances"), file = "ESTRESScov_fitTABLE", type = "csv", print.results = TRUE)
semPaths(Kim_fit_covs, #must identiy the model you want to map
what = "est", #"est" plots the estimates, but keeps it greyscale with no fading
#whatLabels = "stand", #"stand" changes to standardized values
layout = 'tree', rotation = 2, #together, puts predictors on left, IVs on right
edge.label.cex = 1.00, #font size of parameter values
#edge.color = "black", #overwrites the green/black coloring
sizeMan=10, #size of squares/observed/"manifest" variables
fade=FALSE, #if TRUE, there lines are faded such that weaker lines correspond with lower values -- a cool effect, but tough for journals
esize=2,
asize=3,
#label.prop = .5,
label.font = 2.5, #controls size (I think) of font for labels
label.scale = TRUE, #if false, the labels will not scale to fit inside the nodes
nDigits = 3, #decimal places (default is 2)
residuals = FALSE,#excludes residuals (and variances) from the path diagram
nCharNodes = 0, #specifies how many characters to abbreviate variable lables; default is 3.  If 0, uses your entire variable label and adjusts fontsize (which could be a downside)
intercepts = FALSE, #gets rid of those annoying triangles (intercepts) in the path diagram)
)
title("Entrepreneurial Withdrawal by eDistress via Negative Affect (& some covariates(")
#Entering the intercorrelations, means, and standard deviations from the journal article
mu <- c(.34, 3.00, 2.98, 2.36, 3.50, 1.64)
sd <- c(.16, .83, .99, .90, .90, .53)
r_mat <- matrix (c(1,   .59, .26,   .34,  -.25, -.02,
.59, 1.00, .12,   .19,  -.28, .00,
.26,  .12, 1.00, .66,  -.55, .07,
.34,  .19, .66,  1.00, -.66, .05,
-.25, -.28, -.55,-.66,  1.00, .08,
-.02,  .00,  .07, .05, .08,  1), ncol = 6)
#Creating a covariance matrix
cov_mat <- sd %*% t(sd) * r_mat
#Set random seed so that the following matrix always gets the same results.
set.seed(210409)
library(MASS)
Kim_df <- mvrnorm(n = 156, mu=mu, Sigma = cov_mat, empirical = TRUE)
colMeans(Kim_df)
#Checking our work against the original correlation matrix
round(cor(Kim_df),3)
#renaming the variables
as.data.frame(Kim_df, row.names = NULL, optional = FALSE, make.names = TRUE)
library(tidyverse)
Kim_df <- Kim_df%>%
as.data.frame %>%
rename(REMS = V1, CMI = V2, ANX = V3, DEP = V4, PWB = V5, HlpSk = V6)
#look at the first 6 rows of the new df
head(Kim_df)
library(psych)
psych::describe(Kim_df)
set.seed(210410) #reset in case you choose to separate these sections
model <- '
DEP ~ b*CMI + c_p*REMS
CMI ~a*REMS
indirect :=  a*b
direct  := c_p
total_c  := c_p + (a*b)
'
Kim_fit <- sem(model, data = Kim_df, se="bootstrap", missing= 'fiml')
library(lavaan)
library(lavaan)
set.seed(210410) #reset in case you choose to separate these sections
model <- '
DEP ~ b*CMI + c_p*REMS
CMI ~a*REMS
indirect :=  a*b
direct  := c_p
total_c  := c_p + (a*b)
'
Kim_fit <- sem(model, data = Kim_df, se="bootstrap", missing= 'fiml')
Kim_summary <- summary(Kim_fit, standardized=T, rsq=T, fit=TRUE, ci=TRUE)
Kim_ParamEsts <- parameterEstimates(Kim_fit, boot.ci.type = "bca.simple", standardized=TRUE)
Kim_summary
Kim_ParamEsts
library(semTable)
fitTab1 <- semTable(Kim_fit, columns = c("est", "se", "p", "rsquare"),  columnLabels = c(eststars = "Estimate"), paramSets = c("composites", "loadings", "slopes", "intercepts", "residualvariances"), file = "pmi_fitTABLE", type = "csv", print.results = TRUE)
library(semPlot)
semPaths(Kim_fit, #must identiy the model you want to map
what = "est", #"est" plots the estimates, but keeps it greyscale with no fading
#whatLabels = "stand", #"stand" changes to standardized values
layout = 'tree', rotation = 2, #together, puts predictors on left, IVs on right
edge.label.cex = 1.00, #font size of parameter values
#edge.color = "black", #overwrites the green/black coloring
sizeMan=10, #size of squares/observed/"manifest" variables
fade=FALSE, #if TRUE, there lines are faded such that weaker lines correspond with lower values -- a cool effect, but tough for journals
esize=2,
asize=3,
#label.prop = .5,
label.font = 2.5, #controls size (I think) of font for labels
label.scale = TRUE, #if false, the labels will not scale to fit inside the nodes
nDigits = 3, #decimal places (default is 2)
residuals = FALSE,#excludes residuals (and variances) from the path diagram
nCharNodes = 0, #specifies how many characters to abbreviate variable lables; default is 3.  If 0, uses your entire variable label and adjusts fontsize (which could be a downside)
intercepts = FALSE, #gets rid of those annoying triangles (intercepts) in the path diagram)
)
title("Depression by Racial Microaggressions via Cultural Mistrust")
library(lavaan)
set.seed(210410) #reset in case you choose to separate these sections
model <- '
PWB ~ b*CMI + c_p*REMS
CMI ~a*REMS
indirect :=  a*b
direct  := c_p
total_c  := c_p + (a*b)
'
Kim_fit <- sem(model, data = Kim_df, se="bootstrap", missing= 'fiml')
Kim_summary <- summary(Kim_fit, standardized=T, rsq=T, fit=TRUE, ci=TRUE)
Kim_ParamEsts <- parameterEstimates(Kim_fit, boot.ci.type = "bca.simple", standardized=TRUE)
Kim_summary
Kim_ParamEsts
set.seed(210410)
Kim_fit_covs <- '
PWB ~ b*CMI + c_p*REMS
CMI ~a*REMS
CMI ~ covM*ANX
PwB ~ covY*ANX
indirect :=  a*b
direct  := c_p
total_c  := c_p + (a*b)
'
Kim_fit_covs <- sem(Kim_fit_covs, data = Kim_df, se="bootstrap", missing = 'fiml')
set.seed(210410)
Kim_fit_covs <- '
PWB ~ b*CMI + c_p*REMS
CMI ~a*REMS
CMI ~ covM*ANX
PWB ~ covY*ANX
indirect :=  a*b
direct  := c_p
total_c  := c_p + (a*b)
'
Kim_fit_covs <- sem(Kim_fit_covs, data = Kim_df, se="bootstrap", missing = 'fiml')
Kcov_sum <- summary(Kim_fit_covs, standardized=T, rsq=T, fit=TRUE, ci=TRUE)
Kcov_ParEsts<- parameterEstimates(Kim_fit_covs, boot.ci.type = "bca.simple", standardized=TRUE)
Kcov_sum
Kcov_ParEsts
semPaths(Kim_fit_covs, #must identiy the model you want to map
what = "est", #"est" plots the estimates, but keeps it greyscale with no fading
#whatLabels = "stand", #"stand" changes to standardized values
layout = 'tree', rotation = 2, #together, puts predictors on left, IVs on right
edge.label.cex = 1.00, #font size of parameter values
#edge.color = "black", #overwrites the green/black coloring
sizeMan=10, #size of squares/observed/"manifest" variables
fade=FALSE, #if TRUE, there lines are faded such that weaker lines correspond with lower values -- a cool effect, but tough for journals
esize=2,
asize=3,
#label.prop = .5,
label.font = 2.5, #controls size (I think) of font for labels
label.scale = TRUE, #if false, the labels will not scale to fit inside the nodes
nDigits = 3, #decimal places (default is 2)
residuals = FALSE,#excludes residuals (and variances) from the path diagram
nCharNodes = 0, #specifies how many characters to abbreviate variable lables; default is 3.  If 0, uses your entire variable label and adjusts fontsize (which could be a downside)
intercepts = FALSE, #gets rid of those annoying triangles (intercepts) in the path diagram)
)
title("Entrepreneurial Withdrawal by eDistress via Negative Affect (& some covariates(")
set.seed(210410)
X <- rnorm(100)
M <- 0.5*X + rnorm(100)
Y <- 0.7*M + rnorm(100)
Data <- data.frame(X = X, Y = Y, M = M)
library(lavaan)
set.seed(210410) #reset in case you choose to separate these sections
model <- '
Y ~ b*M + c_p*X
M ~a*X
indirect :=  a*b
direct  := c_p
total_c  := c_p + (a*b)
'
fit <- sem(model, data = Data, se="bootstrap", missing= 'fiml')
FDsummary <- summary(fit, standardized=T, rsq=T, fit=TRUE, ci=TRUE)
FD_ParamEsts <- parameterEstimates(fit, boot.ci.type = "bca.simple", standardized=TRUE)
FDsummary
FD_ParamEsts
library(formattable) #to use the digits function
FDa <- digits(FD_ParamEsts$est[3], 3) #B weight for the a path
FDa
FDa_p <- digits(FD_ParamEsts$pvalue[3], 3)#p value for the a path
FDa_p
FDb <- digits(FD_ParamEsts$est[1], 3) #B weight for the b path
FDb
FDb_p <- digits(FD_ParamEsts$pvalue[1], 3)#p value for the b path
FDb_p
FDc_p <- digits(FD_ParamEsts$est[2], 3) #B weight for the c' path
FDc_p
FDc_p_p <- digits(FD_ParamEsts$pvalue[2], 3)#p value for the c' path
FDc_p_p
FDtot <-  digits(FD_ParamEsts$est[12], 3)#p value for the c' path
FDtot
FDtot_p <- digits(FD_ParamEsts$pvalue[12], 3)#p value for the c' path
FDtot_p
# Hand calculating the indirect effect
FDind <- digits(FD_ParamEsts$est[3] * FD_ParamEsts$est[1], 3)
FDind <- digits(FDind, 3)
FDind
FDind_p <- digits(FD_ParamEsts$pvalue[10], 3) #p value for the indirect effect
FDind_p
# Proportio of variance accounted for
Rsq_Y <- percent(FDsummary$PE$est[13])
Rsq_Y
Rsq_M <- percent(FDsummary$PE$est[14])
Rsq_M
COVdir <- digits(Kcov_ParEsts$est[16], 3) #estimate for the direct effect
COVdir
COVdir_p <- digits(Kcov_ParEsts$pvalue[16], 3) #estimate for the direct effect
COVdir_p
COVdir_CIlo <- digits(Kcov_ParEsts$ci.lower[16], 3) #lower confidence interval
COVdir_CIlo
COVdir_CIup <- digits(Kcov_ParEsts$ci.upper[16], 3) #upper confidence interval
COVdir_CIup
COVdir_CIlo <- digits(Kcov_ParEsts$ci.lower[16], 3) #lower confidence interval
COVdir_CIlo
COVdir_CIup <- digits(Kcov_ParEsts$ci.upper[16], 3) #upper confidence interval
COVdir_CIup
# Values for the total effect
COVtot <- digits(Kcov_ParEsts$est[17], 3) #estimate for the direct effect
COVtot
COVtot_p <- digits(Kcov_ParEsts$pvalue[17], 3) #estimate for the direct effect
COVtot_p
COVtot_CIlo <- digits(Kcov_ParEsts$ci.lower[17], 3) #lower confidence interval
COVtot_CIlo
COVtot_CIup <- digits(Kcov_ParEsts$ci.upper[17], 3) #upper confidence interval
COVtot_CIup
Ka_SE <- digits(Kim_ParamEsts$se[3], 3)#p value for the a path
Ka_SE
Kc_p_SE <- digits(Kim_ParamEsts$se[2], 3)#p value for the a path
Kc_p_SE
Kicpt <- digits(Kim_ParamEsts$est[7], 3) #B weight for the intercept
Kicpt
Kicpt_SE <- digits(Kim_ParamEsts$se[7], 3)#p value for the intercept
Kicpt_SE
Kicpt_p <- digits(Kim_ParamEsts$pvalue[7], 3)#p value for the intercept
Kicpt_p
K_Yicpt <- digits(Kim_ParamEsts$est[7], 3) #B weight for the intercept
K_Yicpt
K_Yicpt_SE <- digits(Kim_ParamEsts$se[7], 3)#p value for the intercept
K_Yicpt_SE
K_Yicpt_p <- digits(Kim_ParamEsts$pvalue[7], 3)#p value for the intercept
K_Yicpt_p
# Values for the intercept of the mediator
K_Micpt <- digits(Kim_ParamEsts$est[8], 3) #B weight for the intercept
K_Micpt
K_Micpt_SE <- digits(Kim_ParamEsts$se[8], 3)#p value for the intercept
K_Micpt_SE
K_Micpt_p <- digits(Kim_ParamEsts$pvalue[8], 3)#p value for the intercept
K_Micpt_p
Kb <- digits(Kim_ParamEsts$est[1], 3) #B weight for the b path
Kb
Kb_SE <- digits(Kim_ParamEsts$se[1], 3)#SE for the a path
Kb_SE
Kb_p <- digits(Kim_ParamEsts$pvalue[1], 3)#p value for the b path
Kb_p
Ktot <-  digits(Kim_ParamEsts$est[12], 3)#p value for the total effect
Ktot
Ktot_p <- digits(Kim_ParamEsts$pvalue[12], 3)#p value for the total effect
Ktot_p
Ktot_CIlo <- digits(Kim_ParamEsts$ci.lower[12], 3) #lower confidence interval
Ktot_CIlo
Ktot_CIhi <- digits(Kim_ParamEsts$ci.upper[12], 3) #upper confidence interval
Ktot_CIhi
Kdir <-  digits(Kim_ParamEsts$est[11], 3)#B weight for the direct effect
Kdir
Kdir_p <- digits(Kim_ParamEsts$pvalue[11], 3)#p value for the direct effect
Kdir_p
Kdir_CIlo <- digits(Kim_ParamEsts$ci.lower[11], 3) #lower confidence interval
Kdir_CIlo
Kdir_CIhi <- digits(Kim_ParamEsts$ci.upper[11], 3) #upper confidence interval
Kdir_CIhi
Cov_Yicpt <- digits(Kcov_ParEsts$est[5], 3) #B weight for the intercept
Cov_Yicpt
Cov_Yicpt_SE <- digits(Kcov_ParEsts$se[5], 3)#p value for the intercept
Cov_Yicpt_SE
Cov_Yicpt_p <- digits(Kcov_ParEsts$pvalue[5], 3)#p value for the intercept
Cov_Yicpt_p
# Values for the intercept of the IV
Cov_Yicpt <- digits(Kcov_ParEsts$est[11], 3) #B weight for the intercept
Cov_Yicpt
Cov_Yicpt_SE <- digits(Kcov_ParEsts$se[11], 3)#p value for the intercept
Cov_Yicpt_SE
Cov_Yicpt_p <- digits(Kcov_ParEsts$pvalue[11], 3)#p value for the intercept
Cov_Yicpt_p
# Values for the intercept of the mediator
Cov_Micpt <- digits(Kcov_ParEsts$est[12], 3) #B weight for the intercept
Cov_Micpt
Cov_Micpt_SE <- digits(Kcov_ParEsts$se[12], 3)#p value for the intercept
Cov_Micpt_SE
Cov_Micpt_p <- digits(Kcov_ParEsts$pvalue[12], 3)#p value for the intercept
Cov_Micpt_p
Cova <- digits(Kcov_ParEsts$est[3], 3) #B weight for the a path
Cova
CovSE <- digits(Kcov_ParEsts$se[3], 3) #B weight for the a path
CovSE
Cova_p <- digits(Kcov_ParEsts$pvalue[3], 3)#p value for the a path
Cova_p
Cova <- digits(Kcov_ParEsts$est[3], 3) #B weight for the a path
Cova
CovaSE <- digits(Kcov_ParEsts$se[3], 3) #B weight for the a path
CovaSE
Cova_p <- digits(Kcov_ParEsts$pvalue[3], 3)#p value for the a path
Cova_p
Cova <- digits(Kcov_ParEsts$est[3], 3) #B weight for the a path
Cova
CovaSE <- digits(Kcov_ParEsts$se[3], 3) #SE for the a path
CovaSE
Cova_p <- digits(Kcov_ParEsts$pvalue[3], 3)#p value for the a path
Cova_p
Covb <- digits(Kcov_ParEsts$est[1], 3) #B weight for the b path
Covb
Covb <- digits(Kcov_ParEsts$se[1], 3) #sE for the b path
CovbSE
Cova <- digits(Kcov_ParEsts$est[3], 3) #B weight for the a path
Cova
CovaSE <- digits(Kcov_ParEsts$se[3], 3) #SE for the a path
CovaSE
Cova_p <- digits(Kcov_ParEsts$pvalue[3], 3)#p value for the a path
Cova_p
Covb <- digits(Kcov_ParEsts$est[1], 3) #B weight for the b path
Covb
CovbSE <- digits(Kcov_ParEsts$se[1], 3) #sE for the b path
CovbSE
Covb_p <- digits(Kcov_ParEsts$pvalue[1], 3)#p value for the b path
Covb_p
Covc_p <- digits(Kcov_ParEsts$est[2], 3) #B weight for the c' path
Covc_p
Covc_SE <- digits(Kcov_ParEsts$se[2], 3) #SE for the c' path
Covc_SE
Covc_p_p <- digits(Kcov_ParEsts$pvalue[2], 3)#p value for the c' path
Covc_p_p
Covc_p <- digits(Kcov_ParEsts$est[2], 3) #B weight for the c' path
Covc_p
CovcSE <- digits(Kcov_ParEsts$se[2], 3) #SE for the c' path
CovcSE
Covc_p_p <- digits(Kcov_ParEsts$pvalue[2], 3)#p value for the c' path
Covc_p_p
AnxMa <- digits(Kcov_ParEsts$est[4], 3) #B weight for the a path
AnxMa
AnxMse <- digits(Kcov_ParEsts$se[4], 3) #SE for the a path
AnxMseE
AnxMa <- digits(Kcov_ParEsts$est[4], 3) #B weight for the a path
AnxMa
AnxMse <- digits(Kcov_ParEsts$se[4], 3) #SE for the a path
AnxMse
AnxM_p <- digits(Kcov_ParEsts$pvalue[4], 3)#p value for the a path
AnxM_p
AnxYa <- digits(Kcov_ParEsts$est[5], 3) #B weight for the covariate to M
AnxYa
AnxYse <- digits(Kcov_ParEsts$se[5], 3) #SE for the covariate to M
AnxYse
AnxY_p <- digits(Kcov_ParEsts$pvalue[5], 3)#p for the covariate to M
AnxY_p
citr:::insert_citation()
citr:::insert_citation()
citr:::insert_citation()
citr:::insert_citation()
citr:::insert_citation()
#Entering the intercorrelations, means, and standard deviations from the journal article
mu <- c(1.99, 2.82, 2.48, 2.32, 1.75, 5.71, 21.37, 21.07)
sd <- c(.90, .70, .81, .61, .53, 1.03, 3.83, 4.66)
r_mat <- matrix (c(1, .20, .28, .30, .41, .19, -.32, -.18,
.20, 1, .49, .57, .22, .13, -.06, -.13,
.28, .49, 1, .46, .26, .38, -.18,-.08,
.30, .57, .46,  1, .37, .08, -.14, -.06,
.41, .22, .26, .37, 1, .05, -.54, -.28,
.19, .13, .38, .08, .05, 1, -.10, .14,
-.32, -.06, -.18, -.14, -.54, -.10, 1, .47,
-.18, -.13, -.08, -.06, -.28, .14, .47, 1), ncol = 8)
#Creating a covariance matrix
cov_mat <- sd %*% t(sd) * r_mat
cov_mat
#Set random seed so that the following matrix always gets the same results.
set.seed(210403)
library(MASS)
Lewis_df <- mvrnorm(n = 212, mu=mu, Sigma = cov_mat, empirical = TRUE)
colMeans(Lewis_df)
#Checking our work against the original correlation matrix
cor(Lewis_df)
str(Lewis_df)
as.data.frame(Lewis_df, row.names = NULL, optional = FALSE, make.names = TRUE)
library(tidyverse)
Lewis_df <- Lewis_df%>%
as.data.frame %>%
rename(GRMS = V1, Sprtlty = V2, SocSup = V3, Engmgt = V4, DisEngmt = V5, GRIcntlty = V6, MtnlHlth = V7, PhysHlth = V8)
head(Lewis_df)
citr:::insert_citation()
#Entering the intercorrelations, means, and standard deviations from the journal article
LEWmu <- c(1.99, 2.82, 2.48, 2.32, 1.75, 5.71, 21.37, 21.07)
LEWsd <- c(.90, .70, .81, .61, .53, 1.03, 3.83, 4.66)
LEWr_mat <- matrix (c(1, .20, .28, .30, .41, .19, -.32, -.18,
.20, 1, .49, .57, .22, .13, -.06, -.13,
.28, .49, 1, .46, .26, .38, -.18,-.08,
.30, .57, .46,  1, .37, .08, -.14, -.06,
.41, .22, .26, .37, 1, .05, -.54, -.28,
.19, .13, .38, .08, .05, 1, -.10, .14,
-.32, -.06, -.18, -.14, -.54, -.10, 1, .47,
-.18, -.13, -.08, -.06, -.28, .14, .47, 1), ncol = 8)
#Creating a covariance matrix
LEWcov_mat <- LEWsd %*% t(LEWsd) * LEWr_mat
LEWcov_mat
#Set random seed so that the following matrix always gets the same results.
set.seed(210403)
library(MASS)
Lewis_df <- mvrnorm(n = 212, mu=LEWmu, Sigma = LEWcov_mat, empirical = TRUE)
colMeans(Lewis_df)
#Checking our work against the original correlation matrix
cor(Lewis_df)
str(Lewis_df)
View(Lewis_df)
as.data.frame(Lewis_df, row.names = NULL, optional = FALSE, make.names = TRUE)
library(tidyverse)
Lewis_df <- Lewis_df%>%
as.data.frame %>%
rename(GRMS = V1, Sprtlty = V2, SocSup = V3, Engmgt = V4, DisEngmt = V5, GRIcntlty = V6, MtnlHlth = V7, PhysHlth = V8)
head(Lewis_df)
library(psych)
psych::describe(Lewis_df)
citr:::insert_citation()
#Entering the intercorrelations, means, and standard deviations from the journal article
LEWmu <- c(1.99, 2.82, 2.48, 2.32, 1.75, 5.71, 21.37, 21.07)
LEWsd <- c(.90, .70, .81, .61, .53, 1.03, 3.83, 4.66)
LEWr_mat <- matrix (c(1, .20, .28, .30, .41, .19, -.32, -.18,
.20, 1, .49, .57, .22, .13, -.06, -.13,
.28, .49, 1, .46, .26, .38, -.18,-.08,
.30, .57, .46,  1, .37, .08, -.14, -.06,
.41, .22, .26, .37, 1, .05, -.54, -.28,
.19, .13, .38, .08, .05, 1, -.10, .14,
-.32, -.06, -.18, -.14, -.54, -.10, 1, .47,
-.18, -.13, -.08, -.06, -.28, .14, .47, 1), ncol = 8)
#Creating a covariance matrix
LEWcov_mat <- LEWsd %*% t(LEWsd) * LEWr_mat
LEWcov_mat
#Set random seed so that the following matrix always gets the same results.
set.seed(210403)
library(MASS)
Lewis_df <- mvrnorm(n = 212, mu=LEWmu, Sigma = LEWcov_mat, empirical = TRUE)
colMeans(Lewis_df)
#Checking our work against the original correlation matrix
cor(Lewis_df)
str(Lewis_df)
as.data.frame(Lewis_df, row.names = NULL, optional = FALSE, make.names = TRUE)
library(tidyverse)
Lewis_df <- Lewis_df%>%
as.data.frame %>%
rename(GRMS = V1, Sprtlty = V2, SocSup = V3, Engmgt = V4, DisEngmt = V5, GRIcntlty = V6, MtnlHlth = V7, PhysHlth = V8)
head(Lewis_df)
as.data.frame(Lewis_df, row.names = NULL, optional = FALSE, make.names = TRUE)
library(tidyverse)
Lewis_df <- Lewis_df%>%
as.data.frame %>%
rename(GRMS = V1, Sprtlty = V2, SocSup = V3, Engmgt = V4, DisEngmt = V5, GRIcntlty = V6, MntlHlth = V7, PhysHlth = V8)
#Set random seed so that the following matrix always gets the same results.
set.seed(210403)
library(MASS)
Lewis_df <- mvrnorm(n = 212, mu=LEWmu, Sigma = LEWcov_mat, empirical = TRUE)
colMeans(Lewis_df)
#Checking our work against the original correlation matrix
cor(Lewis_df)
as.data.frame(Lewis_df, row.names = NULL, optional = FALSE, make.names = TRUE)
library(tidyverse)
Lewis_df <- Lewis_df%>%
as.data.frame %>%
rename(GRMS = V1, Sprtlty = V2, SocSup = V3, Engmgt = V4, DisEngmt = V5, GRIcntlty = V6, MntlHlth = V7, PhysHlth = V8)
head(Lewis_df)
citr:::insert_citation()
citr:::insert_citation()
citr:::insert_citation()
