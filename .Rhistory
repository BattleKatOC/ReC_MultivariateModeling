citr:::insert_citation()
item_lvl_df <- read.csv ("BlStItmsScrs210320.csv", head = TRUE, sep = ",")
item_scores_df <- read.csv ("BlStItmsScrs210320.csv", head = TRUE, sep = ",")
item_scores_df <- read.csv ("BlStItmsScrs210320.csv", head = TRUE, sep = ",")
library(tidyverse)
Belong_itms <-(select(item_scores_df, Belong_1:Belong_3)) #if items are in consecutive order in the df, place a colon between first and last
CampClimate_itms <- (select(item_scores_df, rBlst_1, Blst_2:Blst_6)) #we created the reversed item as a separate variable so we wouldn't get confused
Stigma_itms <- (select(item_scores_df, Blst_3, Blst_2, Blst_5))
Responsive_itms <- (select(item_scores_df, rBlst_1, Blst_4, Blst_6))
library(psych)
library(formattable)
Bel_alpha <- alpha(Belong_itms)
CClim_alpha <- alpha(CampClimate_itms)
CClim_alpha
Stigma_alpha <- alpha(Stigma_itms)
Stigma_alpha
Resp_alpha <- alpha(Responsive_itms)
Resp_alpha
str(item_scores_df)
as.numeric(item_scores_df$cmBlack)
str(item_scores)df
as.numeric(item_scores_df$cmBlack)
str(item_scores_df)
as.numeric(item_scores_df$cmBlack)
str(item_scores_df)
as.numeric(item_scores_df$cmBlack)
str(item_scores_df)
as.numeric(as.integer(item_scores_df$cmBlack))
str(item_scores_df)
as.numeric(as.character(item_scores_df$cmBlack))
str(item_scores_df)
descriptives <- (psych::describe(item_scores_df[c("iBIPOC_pr", "cmBlack", "Belonging", "ClimateBL")]))
descriptives <- (psych::describe(item_scores_df[c("iBIPOC_pr", "cmBlack", "Belonging", "ClimateBL")]))
descriptives
# the script may look a little complicated; I could have simply written
describe(items_scores_df)
# the script may look a little complicated; I could have simply written
describe(item_scores_df)
# the script may look a little complicated; I could have simply written
# describe(item_scores_df) #it would have given me descriptives for all the items in the df
# because I only wanted a few variables, I provided them in a concatenated: list [c("iBIPOC_pr", "cmBlack", "Belonging", "ClimateBL")]
# I also added "psych::" in front of the command to make sure that R is using the describe function from the psych package
# I popped the output into an object; objects are not required, but can be helpful to write as outfiles or to use with packages like apaTables
# When we use an object, we need to write it below so the results will display
descriptives <- (psych::describe(item_scores_df[c("iBIPOC_pr", "cmBlack", "Belonging", "ClimateBL")]))
descriptives
# the script may look a little complicated; I could have simply written
# describe(item_scores_df) #it would have given me descriptives for all the items in the df
# because I only wanted a few variables, I provided them in a concatenated: list [c("iBIPOC_pr", "cmBlack", "Belonging", "ClimateBL")]
# I also added "psych::" in front of the command to make sure that R is using the describe function from the psych package
# I popped the output into an object; objects are not required, but can be helpful to write as outfiles, to pipe elements of inline text, and to use with packages like apaTables
# When we use an object, we need to write it below so the results will display
descriptives <- (psych::describe(item_scores_df[c("iBIPOC_pr", "cmBlack", "Belonging", "ClimateBL")]))
descriptives
write.csv (descriptives, file="descripts.csv")
citr:::insert_citation()
library(apaTables)
library(apaTables)
apa.cor.table(item_scores_df[c("iBIPOC_pr", "cmBlack", "Belonging", "ClimateBL")])
library(apaTables)
apa.cor.table(item_scores_df[c("iBIPOC_pr", "cmBlack", "Belonging", "ClimateBL")], table.number = "1", show.sig.stars = TRUE, show.conf.interval = FALSE)
library(apaTables)
apa.cor.table(item_scores_df[c("iBIPOC_pr", "cmBlack", "Belonging", "ClimateBL")], table.number = 1, show.sig.stars = TRUE, show.conf.interval = FALSE)
library(apaTables)
apa.cor.table(item_scores_df[c("iBIPOC_pr", "cmBlack", "Belonging", "ClimateBL")], table.number = 1, show.sig.stars = TRUE, filename = "Table1_M_SDs_r_DataDx")
library(apaTables)
apa.cor.table(item_scores_df[c("iBIPOC_pr", "cmBlack", "Belonging", "ClimateBL")], table.number = 1, show.sig.stars = FALSE, filename = "Table1_M_SDs_r_DataDx")
library(apaTables)
apa.cor.table(item_scores_df[c("iBIPOC_pr", "cmBlack", "Belonging", "ClimateBL")], table.number = 1, show.sig.stars = TRUE, filename = "Table1_M_SDs_r_DataDx")
item_scores_df <- read.csv ("BlStItmsScrs210320.csv", head = TRUE, sep = ",")
library(tidyverse)
Belong_itms <-(select(item_scores_df, Belong_1:Belong_3)) #if items are in consecutive order in the df, place a colon between first and last
CampClimate_itms <- (select(item_scores_df, rBlst_1, Blst_2:Blst_6)) #we created the reversed item as a separate variable so we wouldn't get confused
Stigma_itms <- (select(item_scores_df, Blst_3, Blst_2, Blst_5))
Responsive_itms <- (select(item_scores_df, rBlst_1, Blst_4, Blst_6))
library(psych)
library(formattable)
Bel_alpha <- alpha(Belong_itms)
CClim_alpha <- alpha(CampClimate_itms)
CClim_alpha
Resp_alpha <- alpha(Responsive_itms)
Resp_alpha
Stigma_alpha <- alpha(Stigma_itms)
Stigma_alpha
str(item_scores_df)
# the script may look a little complicated; I could have simply written
# describe(item_scores_df) #it would have given me descriptives for all the items in the df
# because I only wanted a few variables, I provided them in a concatenated: list [c("iBIPOC_pr", "cmBlack", "Belonging", "ClimateBL")]
# I also added "psych::" in front of the command to make sure that R is using the describe function from the psych package
# I popped the output into an object; objects are not required, but can be helpful to write as outfiles, to pipe elements of inline text, and to use with packages like apaTables
# When we use an object, we need to write it below so the results will display
descriptives <- (psych::describe(item_scores_df[c("iBIPOC_pr", "cmBlack", "Belonging", "ClimateBL")]))
descriptives
write.csv (descriptives, file="DataDx_descripts.csv")
outlier(item_scores_df[c("iBIPOC_pr", "cmBlack", "Belonging", "ClimateBL")])
outlier(item_scores_df[c("iBIPOC_pr", "cmBlack", "Belonging", "ClimateBL")])
DataDxOutlier <- outlier(item_scores_df[c("iBIPOC_pr", "cmBlack", "Belonging", "ClimateBL")])
DataDxOutlier <- outlier(item_scores_df[c("iBIPOC_pr", "cmBlack", "Belonging", "ClimateBL")])
DataDxOutlier
as.data.table(DataDxOutlier)
as.data.frame(DataDxOutlier)
str(DataDxOutlier)
DataDxOutlier <- outlier(item_scores_df[c("iBIPOC_pr", "cmBlack", "Belonging", "ClimateBL")])
DataDxOutlier <- outlier(item_scores_df[c("iBIPOC_pr", "cmBlack", "Belonging", "ClimateBL")])
#as.data.frame(DataDxOutlier)
outlier(item_scores_df[c("iBIPOC_pr", "cmBlack", "Belonging", "ClimateBL")])
#as.data.frame(DataDxOutlier)
shapiro.test(item_scores_df$iBIPOC_pr)
shapiro.test(item_scores_df$cmBlack)
shapiro.test(item_scores_df$Belonging)
shapiro.test(item_scores_df$ClimateBL)
SW_iBIPOC_pr <- shapiro.test(item_scores_df$iBIPOC_pr)
shapiro.test(item_scores_df$cmBlack)
shapiro.test(item_scores_df$Belonging)
shapiro.test(item_scores_df$ClimateBL)
SW_iBIPOC_pr <- shapiro.test(item_scores_df$iBIPOC_pr)
SW_cmBlack <- shapiro.test(item_scores_df$cmBlack)
SW_Belonging <-shapiro.test(item_scores_df$Belonging)
SW_ClimateBL <-shapiro.test(item_scores_df$ClimateBL)
SW_iBIPOC_pr <- shapiro.test(item_scores_df$iBIPOC_pr)
SW_cmBlack <- shapiro.test(item_scores_df$cmBlack)
SW_Belonging <-shapiro.test(item_scores_df$Belonging)
SW_ClimateBL <-shapiro.test(item_scores_df$ClimateBL)
SW_iBIPOC_pr
SW_cmBlack
SW_Belonging
SW_ClimateBL
hist(item_scores_df$SW_iBIPOC_pr)
hist(item_scores_df$iBIPOC_pr)
?hist
hist(item_scores_df$iBIPOC_pr)
item_scores_df %>%
pivot_longer(cols=c(SW_iBIPOC_pr,SW_cmBlack, SW_Belonging, SW_ClimateBL), names_to = "Predictor") %>%
ggplot(aes(value, fill = Predictor)) + geom_density(alpha=.4)
library(ggplot2)
library(ggplot2)
item_scores_df %>%
pivot_longer(cols=c(SW_Belonging, SW_ClimateBL), names_to = "Predictor") %>%
ggplot(aes(value, fill = Predictor)) + geom_density(alpha=.4)
hist(item_scores_df$iBIPOC_pr)
hist(item_scores_df$cmBlack)
hist(item_scores_df$Belonging)
hist(item_scores_df$ClimateBL)
hist(item_scores_df$iBIPOC_pr, curve = TRUE)
hist(item_scores_df$iBIPOC_pr)
hist(item_scores_df$cmBlack)
hist(item_scores_df$Belonging)
hist(item_scores_df$ClimateBL)
hist_iBIPOC <- hist(item_scores_df$iBIPOC_pr)
multiplier_iBIPOC <- hist_iBIPOC$counts/hist_iBIPOC$density
density_iBIPOC <- density(item_scores_df$iBIPOC_pr)
hist_iBIPOC <- hist(item_scores_df$iBIPOC_pr)
multiplier_iBIPOC <- hist_iBIPOC$counts / hist_iBIPOC$density
density_iBIPOC <- density(item_scores_df$iBIPOC_pr)
hist_iBIPOC <- hist(item_scores_df$iBIPOC_pr)
multiplier_iBIPOC <- hist_iBIPOC$counts / hist_iBIPOC$density
density_iBIPOC <- density(item_scores_df$iBIPOC_pr)
hist(item_scores_df$iBIPOC_pr, freq = FALSE)
curve(dnorm(x, mean = .44, sd = .4), add = TRUE, col = "blue")
hist(item_scores_df$iBIPOC_pr)
curve(dnorm(x, mean = .44, sd = .4), add = TRUE, col = "blue")
hist(item_scores_df$iBIPOC_pr, freq = FALSE)
curve(dnorm(x, mean = .44, sd = .4), add = TRUE, col = "blue")
hist(item_scores_df$cmBlack, freq = FALSE)
curve(dnorm(x, mean = .44, sd = .4), add = TRUE, col = "blue")
hist(item_scores_df$cmBlack, freq = FALSE)
curve(dnorm(x, mean = 7.45, sd = 7.17), add = TRUE, col = "blue")
hist(item_scores_df$Belonging, freq = FALSE)
curve(dnorm(x, mean = 4.33, sd = 1.54), add = TRUE, col = "blue")
hist(item_scores_df$iBIPOC_pr, freq = FALSE)
curve(dnorm(x, mean = `r descriptives$mean`, sd = `r descriptives$sd`), add = TRUE, col = "blue")
hist(item_scores_df$iBIPOC_pr, freq = FALSE)
curve(dnorm(x, mean = descriptives$iBIPOC_pr$mean, sd = descriptives$iBIPOC_pr$sd), add = TRUE, col = "blue")
hist(item_scores_df$iBIPOC_pr, freq = FALSE)
curve(dnorm(x, mean = `r descriptives$iBIPOC_pr$mean`, sd = `r descriptives$iBIPOC_pr$sd`, add = TRUE, col = "blue")
hist(item_scores_df$iBIPOC_pr, freq = FALSE)
curve(dnorm(x, mean = mean(item_scores_df$iBIPOC_pr), sd = sd(item_scores_df$iBIPOC_pr)), add = TRUE, col = "blue")
hist(item_scores_df$iBIPOC_pr, freq = FALSE)
curve(dnorm(x, mean = mean(item_scores_df$iBIPOC_pr), sd = sd(item_scores_df$iBIPOC_pr)), add = TRUE, col = "blue")
hist(item_scores_df$cmBlack, freq = FALSE)
curve(dnorm(x, mean = 7.45, sd = 7.17), add = TRUE, col = "blue")
hist(item_scores_df$iBIPOC_pr, freq = FALSE)
curve(dnorm(x, mean = .44, sd = .4), add = TRUE, col = "blue")
hist(item_scores_df$cmBlack, freq = FALSE)
curve(dnorm(x, mean = 7.45, sd = 7.17), add = TRUE, col = "blue")
hist(item_scores_df$Belonging, freq = FALSE)
curve(dnorm(x, mean = 4.33, sd = 1.54), add = TRUE, col = "blue")
hist(item_scores_df$Belonging, freq = FALSE)
curve(dnorm(x, mean = 4.33, sd = 1.54), add = TRUE, col = "blue")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(pastecs)
DF <- data.frame(X1=c(4.03,4.11,4.32,3.64,6.82,4.15,4.36,6.95,2.03,6.69,4.15,5.69,3.97,5.82,3.22,4.83,6.06,6.38,3.88,3.29,5.49,5.19,6.72,6.92,6.9,4.94,5.56,5.47,3.2,3.07,5.74,5.14,2.76,5.05,5.24,6.69,3.95,4.54,4.1,2.64,4.2,5.34,4.75,3.2,4.11,6.46,7.32,6.36,5.65,3.54,6.67,3.82,2.94,5.91,7.48,5.9,7.82,3.63,3.47,4.4,3.01,6.82),
X2=c(3.13,4.21,5.42,4.94,7.92,5.15,2.56,7.55,2.23,5.59,2.35,6.89,2.27,5.92,4.82,3.03,4.26,4.38,3.58,1.99,3.69,6.69,6.42,7.12,8.4,3.34,3.56,5.27,2.8,4.87,4.84,5.74,2.56,4.35,3.44,7.89,2.85,3.54,6,1.44,4,6.74,6.75,2.5,2.51,4.56,5.78,5.76,4.75,5.04,5.57,5.02,3.74,6.11,8.66,6.1,7.64,5.63,2.37,6,7.23,2.5))
#Descriptive statistics
stat.desc(DF, norm = TRUE,basic = TRUE) %>% round(2)
#Normality tests
shapiro.test(DF$X1)
shapiro.test(DF$X2)
#Histograms
DF %>%
pivot_longer(cols=c(X1,X2), names_to = "Predictor") %>%
ggplot(aes(value, fill = Predictor)) + geom_density(alpha=.4)
#Calculate and store the Mahalnobis Distance in a new column
DF$MD <- mahalanobis(DF,
colMeans(DF),
cov(DF)) %>% round(2)
#Take a look at the top few rows
head(DF)
#Descriptive Statistics of the Mahalanobis Distances
stat.desc(DF$MD, basic=TRUE, norm=TRUE) %>% round(2)
#Create a density plot of the Mahalanobis Distances
DF %>%
ggplot(aes(MD)) + geom_density()
#Creates a new column identifying whether the Mahalanobis Distance is an outlier
DF$MD_Outlier <- if_else(DF$MD > (median(DF$MD) + (3*sd(DF$MD))), TRUE, FALSE)
#Take a look at the top few rows
head(DF)
#Print the outliers
DF[DF$MD_Outlier==TRUE,]
ggplot(DF, aes(X1,X2)) + geom_point()
outlier(item_scores_df[c("iBIPOC_pr", "cmBlack", "Belonging", "ClimateBL")])
#as.data.frame(DataDxOutlier)
DataDxOutlier <- outlier(item_scores_df[c("iBIPOC_pr", "cmBlack", "Belonging", "ClimateBL")])
#as.data.frame(DataDxOutlier)
as.data.frame(DataDxOutlier)
DataDxOutlier <- outlier(item_scores_df[c("iBIPOC_pr", "cmBlack", "Belonging", "ClimateBL")])
mahalanobis(item_scores_df[c("iBIPOC_pr", "cmBlack", "Belonging", "ClimateBL")])
mahalanobis(item_scores_df[c("iBIPOC_pr", "cmBlack", "Belonging", "ClimateBL")], center, cov, inverted = FALSE)
outlier(item_scores_df[c("iBIPOC_pr", "cmBlack", "Belonging", "ClimateBL")])
outlier(item_scores_df[c("iBIPOC_pr", "cmBlack", "Belonging", "ClimateBL")])
DataDxOutlier <- outlier(item_scores_df[c("iBIPOC_pr", "cmBlack", "Belonging", "ClimateBL")])
as.data.frame(DataDxOutlier)
item_scores_df$Mahal <- outlier(item_scores_df[c("iBIPOC_pr", "cmBlack", "Belonging", "ClimateBL")])
View(item_scores_df)
item_scores_df <- read.csv ("BlStItmsScrs210320.csv", head = TRUE, sep = ",")
library(formattable)
item_scores_df <- read.csv ("BlStItmsScrs210320.csv", head = TRUE, sep = ",")
View(item_scores_df)
library(tidyverse)
Belong_itms <-(select(item_scores_df, Belong_1:Belong_3)) #if items are in consecutive order in the df, place a colon between first and last
CampClimate_itms <- (select(item_scores_df, rBlst_1, Blst_2:Blst_6)) #we created the reversed item as a separate variable so we wouldn't get confused
Stigma_itms <- (select(item_scores_df, Blst_3, Blst_2, Blst_5))
Responsive_itms <- (select(item_scores_df, rBlst_1, Blst_4, Blst_6))
str(item_scores_df)
# the script may look a little complicated; I could have simply written
# describe(item_scores_df) #it would have given me descriptives for all the items in the df
# because I only wanted a few variables, I provided them in a concatenated: list [c("iBIPOC_pr", "cmBlack", "Belonging", "ClimateBL")]
# I also added "psych::" in front of the command to make sure that R is using the describe function from the psych package
# I popped the output into an object; objects are not required, but can be helpful to write as outfiles, to pipe elements of inline text, and to use with packages like apaTables
# When we use an object, we need to write it below so the results will display
descriptives <- (psych::describe(item_scores_df[c("iBIPOC_pr", "cmBlack", "Belonging", "ClimateBL")]))
descriptives
write.csv (descriptives, file="DataDx_descripts.csv")
#The shapiro-test is in base R; it's specification is simple:  shapiro.test(df$variable)
#I added the object (and had to list it below) so I can use the inline text function
SW_iBIPOC_pr <- shapiro.test(item_scores_df$iBIPOC_pr)
SW_cmBlack <- shapiro.test(item_scores_df$cmBlack)
SW_Belonging <-shapiro.test(item_scores_df$Belonging)
SW_ClimateBL <-shapiro.test(item_scores_df$ClimateBL)
SW_iBIPOC_pr
SW_cmBlack
SW_Belonging
SW_ClimateBL
hist(item_scores_df$iBIPOC_pr, freq = FALSE)
curve(dnorm(x, mean = .44, sd = .4), add = TRUE, col = "blue") #M and SD should be updated manually
outlier(item_scores_df[c("iBIPOC_pr", "cmBlack", "Belonging", "ClimateBL")])
?outlier
library(psych)
psych::outlier(item_scores_df[c("iBIPOC_pr", "cmBlack", "Belonging", "ClimateBL")])
item_scores_df$Mahal <- outlier(item_scores_df[c("iBIPOC_pr", "cmBlack", "Belonging", "ClimateBL")])
?outlier
item_scores_df <- read.csv ("BlStItmsScrs210320.csv", head = TRUE, sep = ",")
View(item_scores_df)
library(tidyverse)
Belong_itms <-(select(item_scores_df, Belong_1:Belong_3)) #if items are in consecutive order in the df, place a colon between first and last
CampClimate_itms <- (select(item_scores_df, rBlst_1, Blst_2:Blst_6)) #we created the reversed item as a separate variable so we wouldn't get confused
Stigma_itms <- (select(item_scores_df, Blst_3, Blst_2, Blst_5))
Responsive_itms <- (select(item_scores_df, rBlst_1, Blst_4, Blst_6))
library(psych)
library(formattable)
Bel_alpha <- alpha(Belong_itms)
str(item_scores_df)
# the script may look a little complicated; I could have simply written
# describe(item_scores_df) #it would have given me descriptives for all the items in the df
# because I only wanted a few variables, I provided them in a concatenated: list [c("iBIPOC_pr", "cmBlack", "Belonging", "ClimateBL")]
# I also added "psych::" in front of the command to make sure that R is using the describe function from the psych package
# I popped the output into an object; objects are not required, but can be helpful to write as outfiles, to pipe elements of inline text, and to use with packages like apaTables
# When we use an object, we need to write it below so the results will display
descriptives <- (psych::describe(item_scores_df[c("iBIPOC_pr", "cmBlack", "Belonging", "ClimateBL")]))
descriptives
write.csv (descriptives, file="DataDx_descripts.csv")
#The shapiro-test is in base R; it's specification is simple:  shapiro.test(df$variable)
#I added the object (and had to list it below) so I can use the inline text function
SW_iBIPOC_pr <- shapiro.test(item_scores_df$iBIPOC_pr)
SW_cmBlack <- shapiro.test(item_scores_df$cmBlack)
SW_Belonging <-shapiro.test(item_scores_df$Belonging)
SW_ClimateBL <-shapiro.test(item_scores_df$ClimateBL)
SW_iBIPOC_pr
SW_cmBlack
SW_Belonging
SW_ClimateBL
hist(item_scores_df$iBIPOC_pr, freq = FALSE)
curve(dnorm(x, mean = .44, sd = .4), add = TRUE, col = "blue") #M and SD should be updated manually
item_scores_df$Mahal <- psych::outlier(item_scores_df[c("iBIPOC_pr", "cmBlack", "Belonging", "ClimateBL")])
psych:;outlier(item_scores_df$Mahal)
psych::outlier(item_scores_df$Mahal)
psych::describe(item_scores_df$Mahal)
item_scores_df$MahOut <- if_else(item_scores_df$Mahal > (median(item_scores_df$Mahal) + 3*sd(item_scores_df)), TRUE, FALSE)
item_scores_df <- read.csv ("BlStItmsScrs210320.csv", head = TRUE, sep = ",")
library(tidyverse)
Belong_itms <-(select(item_scores_df, Belong_1:Belong_3)) #if items are in consecutive order in the df, place a colon between first and last
CampClimate_itms <- (select(item_scores_df, rBlst_1, Blst_2:Blst_6)) #we created the reversed item as a separate variable so we wouldn't get confused
Stigma_itms <- (select(item_scores_df, Blst_3, Blst_2, Blst_5))
Responsive_itms <- (select(item_scores_df, rBlst_1, Blst_4, Blst_6))
library(psych)
library(formattable)
Bel_alpha <- alpha(Belong_itms)
CClim_alpha <- alpha(CampClimate_itms)
CClim_alpha
Stigma_alpha <- alpha(Stigma_itms)
Stigma_alpha
Resp_alpha <- alpha(Responsive_itms)
Resp_alpha
str(item_scores_df)
# the script may look a little complicated; I could have simply written
# describe(item_scores_df) #it would have given me descriptives for all the items in the df
# because I only wanted a few variables, I provided them in a concatenated: list [c("iBIPOC_pr", "cmBlack", "Belonging", "ClimateBL")]
# I also added "psych::" in front of the command to make sure that R is using the describe function from the psych package
# I popped the output into an object; objects are not required, but can be helpful to write as outfiles, to pipe elements of inline text, and to use with packages like apaTables
# When we use an object, we need to write it below so the results will display
descriptives <- (psych::describe(item_scores_df[c("iBIPOC_pr", "cmBlack", "Belonging", "ClimateBL")]))
descriptives
write.csv (descriptives, file="DataDx_descripts.csv")
#The shapiro-test is in base R; it's specification is simple:  shapiro.test(df$variable)
#I added the object (and had to list it below) so I can use the inline text function
SW_iBIPOC_pr <- shapiro.test(item_scores_df$iBIPOC_pr)
SW_cmBlack <- shapiro.test(item_scores_df$cmBlack)
SW_Belonging <-shapiro.test(item_scores_df$Belonging)
SW_ClimateBL <-shapiro.test(item_scores_df$ClimateBL)
SW_iBIPOC_pr
SW_cmBlack
SW_Belonging
SW_ClimateBL
hist(item_scores_df$iBIPOC_pr, freq = FALSE)
curve(dnorm(x, mean = .44, sd = .4), add = TRUE, col = "blue") #M and SD should be updated manually
hist(item_scores_df$cmBlack, freq = FALSE)
curve(dnorm(x, mean = 7.45, sd = 7.17), add = TRUE, col = "blue") #M and SD should be updated manually
hist(item_scores_df$Belonging, freq = FALSE)
curve(dnorm(x, mean = 4.33, sd = 1.54), add = TRUE, col = "blue") #M and SD should be updated manually
hist(item_scores_df$Belonging, freq = FALSE)
curve(dnorm(x, mean = 4.33, sd = 1.54), add = TRUE, col = "blue") #M and SD should be updated manually
item_scores_df$Mahal <- psych::outlier(item_scores_df[c("iBIPOC_pr", "cmBlack", "Belonging", "ClimateBL")])
psych::describe(item_scores_df$Mahal)
item_scores_df$MahOut <- if_else(item_scores_df$Mahal > (median(item_scores_df$Mahal) + 3*sd(item_scores_df)), TRUE, FALSE)
str(item_scores_df$Mahal)
#str(item_scores_df$Mahal)
item_scores_df$MOutlier <- if_else(item_scores_df$Mahal > (median(item_scores_df$Mahal) + (3*sd(item_scores_df$Mahal))), TRUE, FALSE)
library(ggplot2)
psych::pairs.panels(item_scores_df, stars = TRUE, lm = TRUE)
psych::pairs.panels(item_scores_df[c("iBIPOC_pr", "cmBlack", "Belonging", "ClimateBL")], stars = TRUE, lm = TRUE)
alpha <- alpha(item_scores_df[c("iBIPOC_pr", "cmBlack", "Belonging", "ClimateBL")]
psych::pairs.panels(item_scores_df[c("iBIPOC_pr", "cmBlack", "Belonging", "ClimateBL")], stars = TRUE, lm = TRUE)
alpha <- alpha(item_scores_df[c("iBIPOC_pr", "cmBlack", "Belonging", "ClimateBL")])
alpha <- alpha(item_scores_df[c("Belong_1", "Belong_2", "Belong_3")])
alpha <- alpha(item_scores_df[c("Belong_1", "Belong_2", "Belong_3")])
alpha <- alpha(item_scores_df[c("Belong_1", "Belong_2", "Belong_3")])
alpha
library(psych)
library(formattable)
Bel_alpha <- alpha(Belong_itms)
library(psych)
library(formattable)
Bel_alpha <- alpha(Belong_itms)
library(psych)
library(formattable)
Bel_alpha <- alpha(Belong_itms)
Bel_alpha
Bel_alpha <- alpha(item_scores_df[c("Belong_1", "Belong_2", "Belong_3")])
Bel_alpha
library(psych)
library(formattable)
Bel_alpha <- psych::alpha(item_scores_df[c("Belong_1", "Belong_2", "Belong_3")])
Bel_alpha
Bel_alpha <- psych::alpha(item_scores_df[c("Belong_1":"Belong_3")])
Bel_alpha <- psych::alpha(item_scores_df[c("Belong_1"::"Belong_3")])
library(psych)
library(formattable)
Bel_alpha <- psych::alpha(item_scores_df[c("Belong_1", "Belong_2", "Belong_3")])
Bel_alpha
CClim_alpha <- psych::alpha(item_scores_df[c("rBlst_1", "Blst_2", "Blst_3", "Blst_4", "Blst_5", "Blst_6")])
CClim_alpha
Stigma_alpha <- psych::alpha(item_scores_df[c("Blst_3", "Blst_2", "Blst_5")])
Stigma_alpha
Resp_alpha <- psych::alpha(item_scores_df[c("rBlst_1", "Blst_4", "Blst_5", "Blst_6")])
Resp_alpha
Resp_alpha <- psych::alpha(item_scores_df[c("rBlst_1", "Blst_4", "Blst_6")])
Resp_alpha
library(dplyr)
OutlierCount <- item_scores_df$MOutlier%>%
count(FALSE)
OutlierCount <- item_scores_df%>%
count(MOutlier == "FALSE")
#str(item_scores_df$Mahal)
item_scores_df$MOutlier <- if_else(item_scores_df$Mahal > (median(item_scores_df$Mahal) + (3*sd(item_scores_df$Mahal))), TRUE, FALSE)
library(dplyr)
OutlierCount <- item_scores_df%>%
count(MOutlier == "FALSE")
OutlierCount
#str(item_scores_df$Mahal)
item_scores_df$MOutlier <- if_else(item_scores_df$Mahal > (median(item_scores_df$Mahal) + (3*sd(item_scores_df$Mahal))), TRUE, FALSE)
library(dplyr)
OutlierCount <- item_scores_df%>%
count(MOutlier == "TRUE")
OutlierCount
#str(item_scores_df$Mahal)
item_scores_df$MOutlier <- if_else(item_scores_df$Mahal > (median(item_scores_df$Mahal) + (3*sd(item_scores_df$Mahal))), TRUE, FALSE)
library(dplyr)
OutlierCount <- item_scores_df%>%
count(MOutlier)
OutlierCount
#str(item_scores_df$Mahal)
item_scores_df$MOutlier <- if_else(item_scores_df$Mahal > (median(item_scores_df$Mahal) + (3*sd(item_scores_df$Mahal))), TRUE, FALSE)
library(dplyr)
OutlierCount <- item_scores_df%>%
count(MOutlier)
OutlierCount
nrow(item_scores_df) - OutlierCount
#str(item_scores_df$Mahal)
item_scores_df$MOutlier <- if_else(item_scores_df$Mahal > (median(item_scores_df$Mahal) + (3*sd(item_scores_df$Mahal))), TRUE, FALSE)
library(dplyr)
OutlierCount <- item_scores_df%>%
count(MOutlier)
OutlierCount
NumOutliers <- nrow(item_scores_df) - OutlierCount
NumOutliers
Climate_fit <- lm(ClimateBL ~ Belonging + iBIPOC_pr + cmBlack, data = item_scores_df)
summary(AIA_ldr_fit)
Climate_fit <- lm(ClimateBL ~ Belonging + iBIPOC_pr + cmBlack, data = item_scores_df)
summary(Climate_fit)
Climate_fit <- lm(ClimateBL ~ Belonging*cmBlack + iBIPOC_pr, data = item_scores_df)
summary(Climate_fit)
Climate_fit <- lm(ClimateBL ~ Belonging + cmBlack + iBIPOC_pr, data = item_scores_df)
summary(Climate_fit)
Climate_fit <- lm(ClimateBL ~  cmBlack + iBIPOC_pr, data = item_scores_df)
summary(Climate_fit)
Climate_fit <- lm(ClimateBL ~ Belonging + cmBlack + iBIPOC_pr, data = item_scores_df)
summary(Climate_fit)
library(apaTables)
apaTables::apa.reg.table(Climate_fit, table.number = 2, filename = "Climate_table.doc")
str(summary(fit))
str(summary(Climate_fit))
?if_else
str(summary(Climate_fit))
item_scores_df <- read.csv ("BlStItmsScrs210320.csv", head = TRUE, sep = ",")
library(psych)
library(formattable)
Bel_alpha <- psych::alpha(item_scores_df[c("Belong_1", "Belong_2", "Belong_3")])
Bel_alpha
CClim_alpha <- psych::alpha(item_scores_df[c("rBlst_1", "Blst_2", "Blst_3", "Blst_4", "Blst_5", "Blst_6")])
CClim_alpha
Stigma_alpha <- psych::alpha(item_scores_df[c("Blst_3", "Blst_2", "Blst_5")])
Stigma_alpha
Resp_alpha <- psych::alpha(item_scores_df[c("rBlst_1", "Blst_4", "Blst_6")])
Resp_alpha
str(item_scores_df)
# the script may look a little complicated; I could have simply written
# describe(item_scores_df) #it would have given me descriptives for all the items in the df
# because I only wanted a few variables, I provided them in a concatenated: list [c("iBIPOC_pr", "cmBlack", "Belonging", "ClimateBL")]
# I also added "psych::" in front of the command to make sure that R is using the describe function from the psych package
# I popped the output into an object; objects are not required, but can be helpful to write as outfiles, to pipe elements of inline text, and to use with packages like apaTables
# When we use an object, we need to write it below so the results will display
descriptives <- (psych::describe(item_scores_df[c("iBIPOC_pr", "cmBlack", "Belonging", "ClimateBL")]))
descriptives
write.csv (descriptives, file="DataDx_descripts.csv")
#The shapiro-test is in base R; it's specification is simple:  shapiro.test(df$variable)
#I added the object (and had to list it below) so I can use the inline text function
SW_iBIPOC_pr <- shapiro.test(item_scores_df$iBIPOC_pr)
SW_cmBlack <- shapiro.test(item_scores_df$cmBlack)
SW_Belonging <-shapiro.test(item_scores_df$Belonging)
SW_ClimateBL <-shapiro.test(item_scores_df$ClimateBL)
SW_iBIPOC_pr
SW_cmBlack
SW_Belonging
SW_ClimateBL
psych::pairs.panels(item_scores_df[c("iBIPOC_pr", "cmBlack", "Belonging", "ClimateBL")], stars = TRUE, lm = TRUE)
item_scores_df$Mahal <- psych::outlier(item_scores_df[c("iBIPOC_pr", "cmBlack", "Belonging", "ClimateBL")])
psych::describe(item_scores_df$Mahal)
library(dplyr)
#str(item_scores_df$Mahal)
item_scores_df$MOutlier <- if_else(item_scores_df$Mahal > (median(item_scores_df$Mahal) + (3*sd(item_scores_df$Mahal))), TRUE, FALSE)
library(dplyr)
OutlierCount <- item_scores_df%>%
count(MOutlier)
OutlierCount
NumOutliers <- nrow(item_scores_df) - OutlierCount
NumOutliers
Climate_fit <- lm(ClimateBL ~ Belonging + cmBlack + iBIPOC_pr, data = item_scores_df)
summary(Climate_fit)
str(summary(Climate_fit))
install.packages("gtsummary")
install.packages("gtsummary")
install.packages("gtsummary")
install.packages("gtsummary")
#install.packages("gtsummary")
library(gtsummary)
install.packages("gtsummary")
#install.packages("gtsummary")
library(gtsummary)
install.packages("gtsummary")
install.packages("gtsummary")
install.packages("gtsummary")
