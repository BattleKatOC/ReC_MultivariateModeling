QTRX_df <- rename(QTRX_df, iRace1 = '1_iRace', iRace2 = '2_iRace', iRace3 = '3_iRace', iRace4 = '4_iRace', iRace5 = '5_iRace', iRace6 = '6_iRace', iRace7 = '7_iRace', iRace8 = '8_iRace', iRace9 = '9_iRace', iRace10 = '10_iRace')
#You can use the ":" to include all variables from the first to last variable in any sequence; I could have written this more efficiently.  I just like to "see" my scales and clusters of variables.
Model_df <-(select (QTRX_df, ID, iRace1, iRace2, iRace3, iRace4, iRace5, iRace6, iRace7, iRace8, iRace9, iRace10, cmBiMulti, cmBlack, cmNBPoC, cmWhite, CMUnsure, Belong_1:Belong_3, Blst_1:Blst_6))
#You can use the ":" to include all variables from the first to last variable in any sequence; I could have written this more efficiently.  I just like to "see" my scales and clusters of variables.
Model_df <-(select (QTRX_df, ID, iRace1, iRace2, iRace3, iRace4, iRace5, iRace6, iRace7, iRace8, iRace9, iRace10, cmBiMulti, cmBlack, cmNBPoC, cmWhite, cmUnsure, Belong_1:Belong_3, Blst_1:Blst_6))
View(Model_df)
scrub_df <- read.csv ("BlackStntsModel210318.csv", head = TRUE, sep = ",")
str(scrub_df)
scrub_df[,'iRace1'] <- as.factor(scrub_df[,'iRace1'])
scrub_df[,'iRace2'] <- as.factor(scrub_df[,'iRace2'])
scrub_df[,'iRace3'] <- as.factor(scrub_df[,'iRace3'])
scrub_df[,'iRace4'] <- as.factor(scrub_df[,'iRace4'])
scrub_df[,'iRace5'] <- as.factor(scrub_df[,'iRace5'])
scrub_df[,'iRace6'] <- as.factor(scrub_df[,'iRace6'])
scrub_df[,'iRace7'] <- as.factor(scrub_df[,'iRace7'])
scrub_df[,'iRace8'] <- as.factor(scrub_df[,'iRace8'])
scrub_df[,'iRace9'] <- as.factor(scrub_df[,'iRace9'])
scrub_df[,'iRace10'] <- as.factor(scrub_df[,'iRace10'])
str(scrub_df)
library(dplyr)
scrub_df <- scrub_df %>%
mutate(tRace1 = recode(iRace1, "0" = "Black", "1" = "nBpoc", "2" = "BiMulti", "3" = "White", "4" = "NotNotice"))%>%
mutate(tRace2 = recode(iRace2, "0" = "Black", "1" = "nBpoc", "2" = "BiMulti", "3" = "White", "4" = "NotNotice"))%>%
mutate(tRace3 = recode(iRace3, "0" = "Black", "1" = "nBpoc", "2" = "BiMulti", "3" = "White", "4" = "NotNotice"))%>%
mutate(tRace4 = recode(iRace4, "0" = "Black", "1" = "nBpoc", "2" = "BiMulti", "3" = "White", "4" = "NotNotice"))%>%
mutate(tRace5 = recode(iRace5, "0" = "Black", "1" = "nBpoc", "2" = "BiMulti", "3" = "White", "4" = "NotNotice"))%>%
mutate(tRace6 = recode(iRace6, "0" = "Black", "1" = "nBpoc", "2" = "BiMulti", "3" = "White", "4" = "NotNotice"))%>%
mutate(tRace7 = recode(iRace7, "0" = "Black", "1" = "nBpoc", "2" = "BiMulti", "3" = "White", "4" = "NotNotice"))%>%
mutate(tRace8 = recode(iRace8, "0" = "Black", "1" = "nBpoc", "2" = "BiMulti", "3" = "White", "4" = "NotNotice"))%>%
mutate(tRace9 = recode(iRace9, "0" = "Black", "1" = "nBpoc", "2" = "BiMulti", "3" = "White", "4" = "NotNotice"))%>%
mutate(tRace10 = recode(iRace10, "0" = "Black", "1" = "nBpoc", "2" = "BiMulti", "3" = "White", "4" = "NotNotice"))
scrub_df$count.BIPOC <- apply(scrub_df[c("tRace1", "tRace2", "tRace3", "tRace4", "tRace5", "tRace6", "tRace7", "tRace8", "tRace9", "tRace10")], 1, function(x) sum(x %in% c("Black", "nBpoc", "BiMulti")))
scrub_df$count.nMiss <- apply(scrub_df[c("tRace1", "tRace2", "tRace3", "tRace4", "tRace5", "tRace6", "tRace7", "tRace8", "tRace9", "tRace10")], 1, function(x) sum(!is.na(x)))
scrub_df$iBIPOC_pr = scrub_df$count.BIPOC/scrub_df$count.nMiss
View(scrub_df)
scrub_df <-(select (scrub_df, ID, iBIPOCpr, cmBlack, Belong_1:Belong_3, Blst_1:Blst_6))
scrub_df <-(select (scrub_df, ID, iBIPOC_pr, cmBlack, Belong_1:Belong_3, Blst_1:Blst_6))
#Calculating number and proportion of item-level missingness
scrub_df$nmiss <- scrubbed%>%
select(iBIPOC_pr:Blst_6) %>% #the colon allows us to include all variables between the two listed (the variables need to be in order)
is.na %>%
rowSums
#Calculating number and proportion of item-level missingness
scrub_df$nmiss <- scrub_df%>%
select(iBIPOC_pr:Blst_6) %>% #the colon allows us to include all variables between the two listed (the variables need to be in order)
is.na %>%
rowSums
scrub_df<- scrub_df%>%
mutate(prop_miss = (nmiss/11)*100) #11 is the number of variables included in calculating the proportion
PrMiss<-psych::describe(scrub_df$prop_miss)
PrMiss
scrub_df <- filter(scrub_df, prop_miss <= 90)  #update df to have only those with at least 90% of complete data
View(PrMiss)
View(scrub_df)
scrub_df <- scrub_df %>%
select (-c(ID, nmiss, prop_miss))#further update to exclude the n_miss and prop_miss variables
CaseMiss<-psych::describe(scrub_df$prop_miss)
#will install the package if not already installed
if(!require(qualtRics)){install.packages("qualtRics")}
if(!require(tidyverse)){install.packages("tidyverse")}
if(!require(psych)){install.packages("psych")}
scrub_df <- read.csv ("BlackStntsModel210318.csv", head = TRUE, sep = ",")
str(scrub_df)
scrub_df[,'iRace1'] <- as.factor(scrub_df[,'iRace1'])
scrub_df[,'iRace2'] <- as.factor(scrub_df[,'iRace2'])
scrub_df[,'iRace3'] <- as.factor(scrub_df[,'iRace3'])
scrub_df[,'iRace4'] <- as.factor(scrub_df[,'iRace4'])
scrub_df[,'iRace5'] <- as.factor(scrub_df[,'iRace5'])
scrub_df[,'iRace6'] <- as.factor(scrub_df[,'iRace6'])
scrub_df[,'iRace7'] <- as.factor(scrub_df[,'iRace7'])
scrub_df[,'iRace8'] <- as.factor(scrub_df[,'iRace8'])
scrub_df[,'iRace9'] <- as.factor(scrub_df[,'iRace9'])
scrub_df[,'iRace10'] <- as.factor(scrub_df[,'iRace10'])
str(scrub_df)
library(dplyr)
scrub_df <- scrub_df %>%
mutate(tRace1 = recode(iRace1, "0" = "Black", "1" = "nBpoc", "2" = "BiMulti", "3" = "White", "4" = "NotNotice"))%>%
mutate(tRace2 = recode(iRace2, "0" = "Black", "1" = "nBpoc", "2" = "BiMulti", "3" = "White", "4" = "NotNotice"))%>%
mutate(tRace3 = recode(iRace3, "0" = "Black", "1" = "nBpoc", "2" = "BiMulti", "3" = "White", "4" = "NotNotice"))%>%
mutate(tRace4 = recode(iRace4, "0" = "Black", "1" = "nBpoc", "2" = "BiMulti", "3" = "White", "4" = "NotNotice"))%>%
mutate(tRace5 = recode(iRace5, "0" = "Black", "1" = "nBpoc", "2" = "BiMulti", "3" = "White", "4" = "NotNotice"))%>%
mutate(tRace6 = recode(iRace6, "0" = "Black", "1" = "nBpoc", "2" = "BiMulti", "3" = "White", "4" = "NotNotice"))%>%
mutate(tRace7 = recode(iRace7, "0" = "Black", "1" = "nBpoc", "2" = "BiMulti", "3" = "White", "4" = "NotNotice"))%>%
mutate(tRace8 = recode(iRace8, "0" = "Black", "1" = "nBpoc", "2" = "BiMulti", "3" = "White", "4" = "NotNotice"))%>%
mutate(tRace9 = recode(iRace9, "0" = "Black", "1" = "nBpoc", "2" = "BiMulti", "3" = "White", "4" = "NotNotice"))%>%
mutate(tRace10 = recode(iRace10, "0" = "Black", "1" = "nBpoc", "2" = "BiMulti", "3" = "White", "4" = "NotNotice"))
scrub_df$count.BIPOC <- apply(scrub_df[c("tRace1", "tRace2", "tRace3", "tRace4", "tRace5", "tRace6", "tRace7", "tRace8", "tRace9", "tRace10")], 1, function(x) sum(x %in% c("Black", "nBpoc", "BiMulti")))
scrub_df$count.nMiss <- apply(scrub_df[c("tRace1", "tRace2", "tRace3", "tRace4", "tRace5", "tRace6", "tRace7", "tRace8", "tRace9", "tRace10")], 1, function(x) sum(!is.na(x)))
scrub_df$iBIPOC_pr = scrub_df$count.BIPOC/scrub_df$count.nMiss
scrub_df <-(select (scrub_df, ID, iBIPOC_pr, cmBlack, Belong_1:Belong_3, Blst_1:Blst_6))
#Calculating number and proportion of item-level missingness
scrub_df$nmiss <- scrub_df%>%
select(iBIPOC_pr:Blst_6) %>% #the colon allows us to include all variables between the two listed (the variables need to be in order)
is.na %>%
rowSums
scrub_df<- scrub_df%>%
mutate(prop_miss = (nmiss/11)*100) #11 is the number of variables included in calculating the proportion
CaseMiss<-psych::describe(scrub_df$prop_miss)
CaseMiss
scrub_df <- filter(scrub_df, prop_miss <= 90)  #update df to have only those with at least 90% of complete data
scrub_df <- scrub_df %>%
select (-c(ID, nmiss, prop_miss))#further update to exclude the n_miss and prop_miss variables
CellsMiss <- mean(is.na(scrub_df))#what proportion of cells missing across entire dataset
CaseComplete <- mean(complete.cases(scrub_df))#what proportion of cases (rows) are complete (nonmissing)
CellsMiss <- mean(is.na(scrub_df))#what proportion of cells missing across entire dataset
CaseComplete <- mean(complete.cases(scrub_df))#what proportion of cases (rows) are complete (nonmissing)
CellsMiss <- mean(is.na(scrub_df))#what proportion of cells missing across entire dataset
CaseComplete <- mean(complete.cases(scrub_df))#what proportion of cases (rows) are complete (nonmissing)
CellsMiss
CaseComplete
CellsMiss <- percent(mean(is.na(scrub_df)))#what proportion of cells missing across entire dataset
install.packages("formattable")
library(formattable)
CellsMiss <- percent(mean(is.na(scrub_df)))#what proportion of cells missing across entire dataset
install.packages("formattable")
library(formattable)
CellsMiss <- percent(mean(is.na(scrub_df)))#what proportion of cells missing across entire dataset
CaseComplete <- percent(mean(complete.cases(scrub_df)))#what proportion of cases (rows) are complete (nonmissing)
CellsMiss
CaseComplete
#install.packages("formattable")
library(formattable)
CellsMiss <- percent(mean(is.na(scrub_df)))#what proportion of cells missing across entire dataset
CaseComplete <- percent(mean(complete.cases(scrub_df)))#what proportion of cases (rows) are complete (nonmissing)
CellsMiss
CaseComplete
#Using the package: mice
library(mice)
mice_out <- md.pattern(mscrub_df, plot = TRUE, rotate.names = FALSE)
#Using the package: mice
library(mice)
mice_out <- md.pattern(mscrub_df, plot = TRUE, rotate.names = FALSE)
#Using the package: mice
library(mice)
mice_out <- md.pattern(scrub_df, plot = TRUE, rotate.names = FALSE)
mice_out
#Using the package: mice
library(mice)
mice_out <- md.pattern(scrub_df, plot = TRUE, rotate.names = TRUE)
mice_out
View(mice_out)
write.csv (mice_out, file="mice_out.csv") #optional to write it to a .csv file
View(mice_out)
citr:::insert_citation()
library(Amelia)
library(Amelia)
Amelia_out <- missmap(mice_df)
library(Amelia)
Amelia_out <- missmap(scrub_df)
Amelia_out
write.csv (amelia_out, file="amelia_out.csv")#optional to write it to a .csv file
write.csv (Amelia_out, file="amelia_out.csv")#optional to write it to a .csv file
library(Amelia)
Amelia_out <- missmap(scrub_df)
Amelia_out
library(naniar)
mcar_test(data)
library(MissMech)
TestMCARNormality(data=scrub_df)
View(scrub_df)
scrub_df<- scrub_df %>%
mutate(rBlst_1 = 8 - Blst_1) #if you had multiple items, you could add a pipe (%>%) at the end of the line and add more until the last one
library(sjstats)
citr:::insert_citation()
citr:::insert_citation()
library(sjstats)
#Making the list of variables
Belonging_vars <- c('Belong_1','Belong_2','Belong_3')
ResponseBL_vars <- c('rBlst_1', 'Blst_4','Blst_6')
StigmaBL_vars <- c('Blst_2', 'Blst_3','Blst_5')
ClimateBL_vars <- c('rBlst_1', 'Blst_4','Blst_6','Blst_2', 'Blst_3','Blst_5' )
#Creating the new variables
score_df$Belonging <- mean_n(score_df[,Belonging_vars], .65)
library(sjstats)
#Making the list of variables
Belonging_vars <- c('Belong_1','Belong_2','Belong_3')
ResponseBL_vars <- c('rBlst_1', 'Blst_4','Blst_6')
StigmaBL_vars <- c('Blst_2', 'Blst_3','Blst_5')
ClimateBL_vars <- c('rBlst_1', 'Blst_4','Blst_6','Blst_2', 'Blst_3','Blst_5' )
#Creating the new variables
score_df$Belonging <- mean_n(scrub_df[,Belonging_vars], .65)
library(sjstats)
#Making the list of variables
Belonging_vars <- c('Belong_1','Belong_2','Belong_3')
ResponseBL_vars <- c('rBlst_1', 'Blst_4','Blst_6')
StigmaBL_vars <- c('Blst_2', 'Blst_3','Blst_5')
ClimateBL_vars <- c('rBlst_1', 'Blst_4','Blst_6','Blst_2', 'Blst_3','Blst_5' )
#Creating the new variables
scrub_df$Belonging <- mean_n(scrub_df[,Belonging_vars], .65)
scrub_df$ResponseBL <- mean_n(scrub_df[,ResponseBL_vars], .80)
scrub_df$StigmaBL <- mean_n(scrub_df[,StigmaBL_vars], .80)
scrub_df$ClimateBL <- mean_n(scrub_df[,ClimateBL_vars], .80)
View(scrub_df)
scrub_df <-(select (scrub_df, iBIPOC_pr, cmBlack, Belonging, ResponseBL, StigmaBL, ClimateBL ))
View(scrub_df)
scrub_df <- read.csv ("BlackStntsModel210318.csv", head = TRUE, sep = ",")
str(scrub_df)
scrub_df[,'iRace1'] <- as.factor(scrub_df[,'iRace1'])
scrub_df[,'iRace2'] <- as.factor(scrub_df[,'iRace2'])
scrub_df[,'iRace3'] <- as.factor(scrub_df[,'iRace3'])
scrub_df[,'iRace4'] <- as.factor(scrub_df[,'iRace4'])
scrub_df[,'iRace5'] <- as.factor(scrub_df[,'iRace5'])
scrub_df[,'iRace6'] <- as.factor(scrub_df[,'iRace6'])
scrub_df[,'iRace7'] <- as.factor(scrub_df[,'iRace7'])
scrub_df[,'iRace8'] <- as.factor(scrub_df[,'iRace8'])
scrub_df[,'iRace9'] <- as.factor(scrub_df[,'iRace9'])
scrub_df[,'iRace10'] <- as.factor(scrub_df[,'iRace10'])
str(scrub_df)
library(dplyr)
scrub_df <- scrub_df %>%
mutate(tRace1 = recode(iRace1, "0" = "Black", "1" = "nBpoc", "2" = "BiMulti", "3" = "White", "4" = "NotNotice"))%>%
mutate(tRace2 = recode(iRace2, "0" = "Black", "1" = "nBpoc", "2" = "BiMulti", "3" = "White", "4" = "NotNotice"))%>%
mutate(tRace3 = recode(iRace3, "0" = "Black", "1" = "nBpoc", "2" = "BiMulti", "3" = "White", "4" = "NotNotice"))%>%
mutate(tRace4 = recode(iRace4, "0" = "Black", "1" = "nBpoc", "2" = "BiMulti", "3" = "White", "4" = "NotNotice"))%>%
mutate(tRace5 = recode(iRace5, "0" = "Black", "1" = "nBpoc", "2" = "BiMulti", "3" = "White", "4" = "NotNotice"))%>%
mutate(tRace6 = recode(iRace6, "0" = "Black", "1" = "nBpoc", "2" = "BiMulti", "3" = "White", "4" = "NotNotice"))%>%
mutate(tRace7 = recode(iRace7, "0" = "Black", "1" = "nBpoc", "2" = "BiMulti", "3" = "White", "4" = "NotNotice"))%>%
mutate(tRace8 = recode(iRace8, "0" = "Black", "1" = "nBpoc", "2" = "BiMulti", "3" = "White", "4" = "NotNotice"))%>%
mutate(tRace9 = recode(iRace9, "0" = "Black", "1" = "nBpoc", "2" = "BiMulti", "3" = "White", "4" = "NotNotice"))%>%
mutate(tRace10 = recode(iRace10, "0" = "Black", "1" = "nBpoc", "2" = "BiMulti", "3" = "White", "4" = "NotNotice"))
scrub_df$count.BIPOC <- apply(scrub_df[c("tRace1", "tRace2", "tRace3", "tRace4", "tRace5", "tRace6", "tRace7", "tRace8", "tRace9", "tRace10")], 1, function(x) sum(x %in% c("Black", "nBpoc", "BiMulti")))
scrub_df$count.nMiss <- apply(scrub_df[c("tRace1", "tRace2", "tRace3", "tRace4", "tRace5", "tRace6", "tRace7", "tRace8", "tRace9", "tRace10")], 1, function(x) sum(!is.na(x)))
scrub_df$iBIPOC_pr = scrub_df$count.BIPOC/scrub_df$count.nMiss
scrub_df <-(select (scrub_df, ID, iBIPOC_pr, cmBlack, Belong_1:Belong_3, Blst_1:Blst_6))
#Calculating number and proportion of item-level missingness
scrub_df$nmiss <- scrub_df%>%
select(iBIPOC_pr:Blst_6) %>% #the colon allows us to include all variables between the two listed (the variables need to be in order)
is.na %>%
rowSums
scrub_df<- scrub_df%>%
mutate(prop_miss = (nmiss/11)*100) #11 is the number of variables included in calculating the proportion
CaseMiss<-psych::describe(scrub_df$prop_miss)
CaseMiss
scrub_df <- filter(scrub_df, prop_miss <= 90)  #update df to have only those with at least 90% of complete data
scrub_df <- scrub_df %>%
select (-c(ID, nmiss, prop_miss))#further update to exclude the n_miss and prop_miss variables
#install.packages("formattable")
library(formattable)
CellsMiss <- percent(mean(is.na(scrub_df)))#what proportion of cells missing across entire dataset
CaseComplete <- percent(mean(complete.cases(scrub_df)))#what proportion of cases (rows) are complete (nonmissing)
CellsMiss
CaseComplete
scrub_df<- scrub_df %>%
mutate(rBlst_1 = 8 - Blst_1) #if you had multiple items, you could add a pipe (%>%) at the end of the line and add more until the last one
library(sjstats)
#Making the list of variables
Belonging_vars <- c('Belong_1','Belong_2','Belong_3')
ResponseBL_vars <- c('rBlst_1', 'Blst_4','Blst_6')
StigmaBL_vars <- c('Blst_2', 'Blst_3','Blst_5')
ClimateBL_vars <- c('rBlst_1', 'Blst_4','Blst_6','Blst_2', 'Blst_3','Blst_5' )
#Creating the new variables
scrub_df$Belonging <- mean_n(scrub_df[,Belonging_vars], .65)
scrub_df$ResponseBL <- mean_n(scrub_df[,ResponseBL_vars], .80)
scrub_df$StigmaBL <- mean_n(scrub_df[,StigmaBL_vars], .80)
scrub_df$ClimateBL <- mean_n(scrub_df[,ClimateBL_vars], .80)
write.table(scrub_df, file="BlStItmsScrs210320.csv", sep=",", col.names=TRUE, row.names=FALSE)
scored <-(select (scrub_df, iBIPOC_pr, cmBlack, Belonging, ResponseBL, StigmaBL, ClimateBL ))
nrow(scored)
scored <-(select (scrub_df, iBIPOC_pr, cmBlack, Belonging, ResponseBL, StigmaBL, ClimateBL))
ScoredCaseMiss <- nrow(scored)
#Create a variable (n_miss) that counts the number missing
scored$n_miss <- scored%>%
select(Belonging:StigmaBl_vars) %>%
is.na %>%
rowSums
#Create a variable (n_miss) that counts the number missing
scored$n_miss <- scored%>%
select(Belonging:StigmaBL_vars) %>%
is.na %>%
rowSums
View(scored)
#Create a variable (n_miss) that counts the number missing
scored$n_miss <- scored%>%
select(iBIPOCpr:ClimateBL) %>%
is.na %>%
rowSums
#Create a variable (n_miss) that counts the number missing
scored$n_miss <- scored%>%
select(iBIPOC_pr:ClimateBL) %>%
is.na %>%
rowSums
#Create a proportion missing by dividing n_miss by the total number of variables (80)
#Pipe to sort in order of descending frequency to get a sense of the missingness
scored<- scored%>%
mutate(prop_miss = (n_miss/7)*100)%>%
arrange(desc(n_miss))
#Create a variable (n_miss) that counts the number missing
scored$n_miss <- scored%>%
select(iBIPOC_pr:ClimateBL) %>%
is.na %>%
rowSums
#Create a proportion missing by dividing n_miss by the total number of variables (80)
#Pipe to sort in order of descending frequency to get a sense of the missingness
scored<- scored%>%
mutate(prop_miss = (n_miss/7)*100)%>%
arrange(desc(n_miss))
ScoredPrMiss <- psych::describe(scored_df$prop_miss)
#Create a variable (n_miss) that counts the number missing
scored$n_miss <- scored%>%
select(iBIPOC_pr:ClimateBL) %>%
is.na %>%
rowSums
#Create a proportion missing by dividing n_miss by the total number of variables (80)
#Pipe to sort in order of descending frequency to get a sense of the missingness
scored<- scored%>%
mutate(prop_miss = (n_miss/7)*100)%>%
arrange(desc(n_miss))
ScoredPrMiss <- psych::describe(scored$prop_miss)
ScoredPrMiss
scored <- filter(scored, prop_miss <= 5020)  #update df to have only those with at least 20% of complete data (this is an arbitrary decision)
scored <-(select (scored, iBIPOC_pr:ClimateBL)) #the variable selection just lops off the proportion missing
ScoredCasesMIncluded <- nrow(scored)
scored <- filter(scored, prop_miss <= 20)  #update df to have only those with at least 20% of complete data (this is an arbitrary decision)
scrub_df <- read.csv ("BlackStntsModel210318.csv", head = TRUE, sep = ",")
str(scrub_df)
scrub_df[,'iRace1'] <- as.factor(scrub_df[,'iRace1'])
scrub_df[,'iRace2'] <- as.factor(scrub_df[,'iRace2'])
scrub_df[,'iRace3'] <- as.factor(scrub_df[,'iRace3'])
scrub_df[,'iRace4'] <- as.factor(scrub_df[,'iRace4'])
scrub_df[,'iRace5'] <- as.factor(scrub_df[,'iRace5'])
scrub_df[,'iRace6'] <- as.factor(scrub_df[,'iRace6'])
scrub_df[,'iRace7'] <- as.factor(scrub_df[,'iRace7'])
scrub_df[,'iRace8'] <- as.factor(scrub_df[,'iRace8'])
scrub_df[,'iRace9'] <- as.factor(scrub_df[,'iRace9'])
scrub_df[,'iRace10'] <- as.factor(scrub_df[,'iRace10'])
str(scrub_df)
library(dplyr)
scrub_df <- scrub_df %>%
mutate(tRace1 = recode(iRace1, "0" = "Black", "1" = "nBpoc", "2" = "BiMulti", "3" = "White", "4" = "NotNotice"))%>%
mutate(tRace2 = recode(iRace2, "0" = "Black", "1" = "nBpoc", "2" = "BiMulti", "3" = "White", "4" = "NotNotice"))%>%
mutate(tRace3 = recode(iRace3, "0" = "Black", "1" = "nBpoc", "2" = "BiMulti", "3" = "White", "4" = "NotNotice"))%>%
mutate(tRace4 = recode(iRace4, "0" = "Black", "1" = "nBpoc", "2" = "BiMulti", "3" = "White", "4" = "NotNotice"))%>%
mutate(tRace5 = recode(iRace5, "0" = "Black", "1" = "nBpoc", "2" = "BiMulti", "3" = "White", "4" = "NotNotice"))%>%
mutate(tRace6 = recode(iRace6, "0" = "Black", "1" = "nBpoc", "2" = "BiMulti", "3" = "White", "4" = "NotNotice"))%>%
mutate(tRace7 = recode(iRace7, "0" = "Black", "1" = "nBpoc", "2" = "BiMulti", "3" = "White", "4" = "NotNotice"))%>%
mutate(tRace8 = recode(iRace8, "0" = "Black", "1" = "nBpoc", "2" = "BiMulti", "3" = "White", "4" = "NotNotice"))%>%
mutate(tRace9 = recode(iRace9, "0" = "Black", "1" = "nBpoc", "2" = "BiMulti", "3" = "White", "4" = "NotNotice"))%>%
mutate(tRace10 = recode(iRace10, "0" = "Black", "1" = "nBpoc", "2" = "BiMulti", "3" = "White", "4" = "NotNotice"))
scrub_df$count.BIPOC <- apply(scrub_df[c("tRace1", "tRace2", "tRace3", "tRace4", "tRace5", "tRace6", "tRace7", "tRace8", "tRace9", "tRace10")], 1, function(x) sum(x %in% c("Black", "nBpoc", "BiMulti")))
scrub_df$count.nMiss <- apply(scrub_df[c("tRace1", "tRace2", "tRace3", "tRace4", "tRace5", "tRace6", "tRace7", "tRace8", "tRace9", "tRace10")], 1, function(x) sum(!is.na(x)))
scrub_df$iBIPOC_pr = scrub_df$count.BIPOC/scrub_df$count.nMiss
scrub_df <-(select (scrub_df, ID, iBIPOC_pr, cmBlack, Belong_1:Belong_3, Blst_1:Blst_6))
#Calculating number and proportion of item-level missingness
scrub_df$nmiss <- scrub_df%>%
select(iBIPOC_pr:Blst_6) %>% #the colon allows us to include all variables between the two listed (the variables need to be in order)
is.na %>%
rowSums
scrub_df<- scrub_df%>%
mutate(prop_miss = (nmiss/11)*100) #11 is the number of variables included in calculating the proportion
CaseMiss<-psych::describe(scrub_df$prop_miss)
CaseMiss
scrub_df <- filter(scrub_df, prop_miss <= 90)  #update df to have only those with at least 90% of complete data
scrub_df <- scrub_df %>%
select (-c(ID, nmiss, prop_miss))#further update to exclude the n_miss and prop_miss variables
#install.packages("formattable")
library(formattable)
CellsMiss <- percent(mean(is.na(scrub_df)))#what proportion of cells missing across entire dataset
CaseComplete <- percent(mean(complete.cases(scrub_df)))#what proportion of cases (rows) are complete (nonmissing)
CellsMiss
CaseComplete
scrub_df<- scrub_df %>%
mutate(rBlst_1 = 8 - Blst_1) #if you had multiple items, you could add a pipe (%>%) at the end of the line and add more until the last one
library(sjstats)
#Making the list of variables
Belonging_vars <- c('Belong_1','Belong_2','Belong_3')
ResponseBL_vars <- c('rBlst_1', 'Blst_4','Blst_6')
StigmaBL_vars <- c('Blst_2', 'Blst_3','Blst_5')
ClimateBL_vars <- c('rBlst_1', 'Blst_4','Blst_6','Blst_2', 'Blst_3','Blst_5' )
#Creating the new variables
scrub_df$Belonging <- mean_n(scrub_df[,Belonging_vars], .65)
scrub_df$ResponseBL <- mean_n(scrub_df[,ResponseBL_vars], .80)
scrub_df$StigmaBL <- mean_n(scrub_df[,StigmaBL_vars], .80)
scrub_df$ClimateBL <- mean_n(scrub_df[,ClimateBL_vars], .80)
write.table(scrub_df, file="BlStItmsScrs210320.csv", sep=",", col.names=TRUE, row.names=FALSE)
scored <-(select (scrub_df, iBIPOC_pr, cmBlack, Belonging, ResponseBL, StigmaBL, ClimateBL))
ScoredCaseMiss <- nrow(scored)
#Create a variable (n_miss) that counts the number missing
scored$n_miss <- scored%>%
select(iBIPOC_pr:ClimateBL) %>%
is.na %>%
rowSums
#Create a proportion missing by dividing n_miss by the total number of variables (80)
#Pipe to sort in order of descending frequency to get a sense of the missingness
scored<- scored%>%
mutate(prop_miss = (n_miss/7)*100)%>%
arrange(desc(n_miss))
ScoredPrMiss <- psych::describe(scored$prop_miss)
ScoredPrMiss
scored <- filter(scored, prop_miss <= 20)  #update df to have only those with at least 20% of complete data (this is an arbitrary decision)
scored <-(select (scored, iBIPOC_pr:ClimateBL)) #the variable selection just lops off the proportion missing
ScoredCasesIncluded <- nrow(scored)
ScoredCasesIncluded
PrScoredCellsMissing <-mean(is.na(scale_miss)) #percent missing across df
#Create a variable (n_miss) that counts the number missing
scored$n_miss <- scored%>%
select(iBIPOC_pr:ClimateBL) %>%
is.na %>%
rowSums
#Create a proportion missing by dividing n_miss by the total number of variables (80)
#Pipe to sort in order of descending frequency to get a sense of the missingness
scored<- scored%>%
mutate(prop_miss = (n_miss/6)*100)%>%
arrange(desc(n_miss))
ScoredPrMiss <- psych::describe(scored$prop_miss)
ScoredPrMiss #this object is displayed below and I use input from  it for the inline text used in the write-up
scrub_df <- read.csv ("BlackStntsModel210318.csv", head = TRUE, sep = ",")
str(scrub_df)
scrub_df[,'iRace1'] <- as.factor(scrub_df[,'iRace1'])
scrub_df[,'iRace2'] <- as.factor(scrub_df[,'iRace2'])
scrub_df[,'iRace3'] <- as.factor(scrub_df[,'iRace3'])
scrub_df[,'iRace4'] <- as.factor(scrub_df[,'iRace4'])
scrub_df[,'iRace5'] <- as.factor(scrub_df[,'iRace5'])
scrub_df[,'iRace6'] <- as.factor(scrub_df[,'iRace6'])
scrub_df[,'iRace7'] <- as.factor(scrub_df[,'iRace7'])
scrub_df[,'iRace8'] <- as.factor(scrub_df[,'iRace8'])
scrub_df[,'iRace9'] <- as.factor(scrub_df[,'iRace9'])
scrub_df[,'iRace10'] <- as.factor(scrub_df[,'iRace10'])
str(scrub_df)
library(dplyr)
scrub_df <- scrub_df %>%
mutate(tRace1 = recode(iRace1, "0" = "Black", "1" = "nBpoc", "2" = "BiMulti", "3" = "White", "4" = "NotNotice"))%>%
mutate(tRace2 = recode(iRace2, "0" = "Black", "1" = "nBpoc", "2" = "BiMulti", "3" = "White", "4" = "NotNotice"))%>%
mutate(tRace3 = recode(iRace3, "0" = "Black", "1" = "nBpoc", "2" = "BiMulti", "3" = "White", "4" = "NotNotice"))%>%
mutate(tRace4 = recode(iRace4, "0" = "Black", "1" = "nBpoc", "2" = "BiMulti", "3" = "White", "4" = "NotNotice"))%>%
mutate(tRace5 = recode(iRace5, "0" = "Black", "1" = "nBpoc", "2" = "BiMulti", "3" = "White", "4" = "NotNotice"))%>%
mutate(tRace6 = recode(iRace6, "0" = "Black", "1" = "nBpoc", "2" = "BiMulti", "3" = "White", "4" = "NotNotice"))%>%
mutate(tRace7 = recode(iRace7, "0" = "Black", "1" = "nBpoc", "2" = "BiMulti", "3" = "White", "4" = "NotNotice"))%>%
mutate(tRace8 = recode(iRace8, "0" = "Black", "1" = "nBpoc", "2" = "BiMulti", "3" = "White", "4" = "NotNotice"))%>%
mutate(tRace9 = recode(iRace9, "0" = "Black", "1" = "nBpoc", "2" = "BiMulti", "3" = "White", "4" = "NotNotice"))%>%
mutate(tRace10 = recode(iRace10, "0" = "Black", "1" = "nBpoc", "2" = "BiMulti", "3" = "White", "4" = "NotNotice"))
scrub_df$count.BIPOC <- apply(scrub_df[c("tRace1", "tRace2", "tRace3", "tRace4", "tRace5", "tRace6", "tRace7", "tRace8", "tRace9", "tRace10")], 1, function(x) sum(x %in% c("Black", "nBpoc", "BiMulti")))
scrub_df$count.nMiss <- apply(scrub_df[c("tRace1", "tRace2", "tRace3", "tRace4", "tRace5", "tRace6", "tRace7", "tRace8", "tRace9", "tRace10")], 1, function(x) sum(!is.na(x)))
scrub_df$iBIPOC_pr = scrub_df$count.BIPOC/scrub_df$count.nMiss
scrub_df <-(select (scrub_df, ID, iBIPOC_pr, cmBlack, Belong_1:Belong_3, Blst_1:Blst_6))
#Calculating number and proportion of item-level missingness
scrub_df$nmiss <- scrub_df%>%
select(iBIPOC_pr:Blst_6) %>% #the colon allows us to include all variables between the two listed (the variables need to be in order)
is.na %>%
rowSums
scrub_df<- scrub_df%>%
mutate(prop_miss = (nmiss/11)*100) #11 is the number of variables included in calculating the proportion
CaseMiss<-psych::describe(scrub_df$prop_miss)
CaseMiss
scrub_df <- filter(scrub_df, prop_miss <= 90)  #update df to have only those with at least 90% of complete data
scrub_df <- scrub_df %>%
select (-c(ID, nmiss, prop_miss))#further update to exclude the n_miss and prop_miss variables
#install.packages("formattable")
library(formattable)
CellsMiss <- percent(mean(is.na(scrub_df)))#what proportion of cells missing across entire dataset
CaseComplete <- percent(mean(complete.cases(scrub_df)))#what proportion of cases (rows) are complete (nonmissing)
CellsMiss
CaseComplete
scrub_df<- scrub_df %>%
mutate(rBlst_1 = 8 - Blst_1) #if you had multiple items, you could add a pipe (%>%) at the end of the line and add more until the last one
library(sjstats)
#Making the list of variables
Belonging_vars <- c('Belong_1','Belong_2','Belong_3')
ResponseBL_vars <- c('rBlst_1', 'Blst_4','Blst_6')
StigmaBL_vars <- c('Blst_2', 'Blst_3','Blst_5')
ClimateBL_vars <- c('rBlst_1', 'Blst_4','Blst_6','Blst_2', 'Blst_3','Blst_5' )
#Creating the new variables
scrub_df$Belonging <- mean_n(scrub_df[,Belonging_vars], .65)
scrub_df$ResponseBL <- mean_n(scrub_df[,ResponseBL_vars], .80)
scrub_df$StigmaBL <- mean_n(scrub_df[,StigmaBL_vars], .80)
scrub_df$ClimateBL <- mean_n(scrub_df[,ClimateBL_vars], .80)
write.table(scrub_df, file="BlStItmsScrs210320.csv", sep=",", col.names=TRUE, row.names=FALSE)
scored <-(select (scrub_df, iBIPOC_pr, cmBlack, Belonging, ResponseBL, StigmaBL, ClimateBL))
ScoredCaseMiss <- nrow(scored) #I produced this object for the sole purpose of feeding the number of cases into the inline text, below
#Create a variable (n_miss) that counts the number missing
scored$n_miss <- scored%>%
select(iBIPOC_pr:ClimateBL) %>%
is.na %>%
rowSums
#Create a proportion missing by dividing n_miss by the total number of variables (80)
#Pipe to sort in order of descending frequency to get a sense of the missingness
scored<- scored%>%
mutate(prop_miss = (n_miss/6)*100)%>%
arrange(desc(n_miss))
ScoredPrMiss <- psych::describe(scored$prop_miss)
ScoredPrMiss #this object is displayed below and I use input from  it for the inline text used in the write-up
scored <- filter(scored, prop_miss <= 20)  #update df to have only those with at least 20% of complete data (this is an arbitrary decision)
scored <-(select (scored, iBIPOC_pr:ClimateBL)) #the variable selection just lops off the proportion missing
ScoredCasesIncluded <- nrow(scored)
ScoredCasesIncluded #this object is displayed below and I use input from  it for the inline text used in the write-up
PrScoredCellsMissing <-mean(is.na(scale_miss)) #percent missing across df
PrScoredCellsMissing <-mean(is.na(scored)) #percent missing across df
PrScoredRowsMissing <- mean(complete.cases(scored)) #percent of rows with nonmissing data
PrScoredCellsMissing
PrScoredRowsMissing
library(formattable)
percent(PrScoredCellsMissing <-mean(is.na(scored))) #percent missing across df
percent(PrScoredRowsMissing <- mean(complete.cases(scored))) #percent of rows with nonmissing data
PrScoredCellsMissing
PrScoredRowsMissing
percent(PrScoredCellsMissing)
library(formattable)
PrScoredCellsMissing <-mean(is.na(scored)) #percent missing across df
percent(PrScoredRowsMissing <- mean(complete.cases(scored))) #percent of rows with nonmissing data
percent(PrScoredCellsMissing)
percent(PrScoredRowsMissing)
library(formattable)
PrScoredCellsMissing <-percent(mean(is.na(scored))) #percent missing across df
PrScoredRowsMissing <- percent(mean(complete.cases(scored))) #percent of rows with nonmissing data
PrScoredCellsMissing
PrScoredRowsMissing
#Using the package: mice
library(mice)
mice_ScaleLvl <- md.pattern(scale_miss, plot = TRUE, rotate.names=TRUE)
#Using the package: mice
library(mice)
mice_ScaleLvl <- md.pattern(scored, plot = TRUE, rotate.names=TRUE)
sessionInfo()
